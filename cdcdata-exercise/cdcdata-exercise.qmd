---
title: "CDC-Data Exercise"
---

For this exercise, I am analyzing the relation between lung cancer and smoking and alcohol consumption on different demographics in the US by using the Sample Adult Interview data from the 2022 National Health Interview Survey (NHIS). The NHIS is a key source of information on the health trends of civilians in the United States since 1957. It helps identifying the population segments who are at a higher risk of facing health issues. Conducted by the National Center for Health Statistics (NCHS), which is a part of Centers for Disease Control and Prevention (CDC), NHIS is the oldest household health survey in the United States. U.S. Census Bureau was responsible for gathering the data. This data can be found at https://www.cdc.gov/nchs/nhis/2022nhis.htm 

This data has 637 variables and 27651 observations. The variables I am using for the exploratory analyses are lung cancer indicator, age when first diagnosed with lung cancer, number of cigarettes smoked on a day, average number of alcohol drinks on days drank and the gender, age and race of the sample adults. 

```{r}
#Required packages are loaded
library(dplyr)   #for data processing/cleaning
library(tidyr)   #for data processing / cleaning
library(ggplot2) #for nice visualization of data
library(here)    #for easy file referencing
library(skimr)   #for data summary
library(purrr)   #for printing summary table

```

I referenced the data using the "here" function.
```{r}
# path to data
data_location <- here::here("cdcdata-exercise","adult22.csv")

#load data 
rawdata_adult <- read.csv(data_location)
```

I inspected the data by verifying the numbers of rows, looking at a few observations on the top and on the tail-end. The results showed this data has 27651 rows and 637 columns which are in line with the information on the code book.  

```{r}
#Check the no. of rows
nrow(rawdata_adult)
#Check the no. of columns
ncol(rawdata_adult)
#Check the head
head(rawdata_adult)
#Check the tail
tail(rawdata_adult)
```

As I am using only 7 variables for the exploratory analysis, I created a subset of the data containing of only those variables which are Sex, Age, Race, Lung Cancer indicator, Age first diagnosed with lung cancer, Number of Cigarettes smoked on a day and Average no. of Alcohol drinks on days drank. These variables as coded as "SEX_A", "AGEP_A", "RACEALLP_A", "LUNGCAN_A", "LUNGAGETC_A", "CIGNOW_A" and "DRKAVG12M_A" respectively in the codebook.

```{r}
CleanStep1_adult <- rawdata_adult[,c("SEX_A", "AGEP_A", "RACEALLP_A", "LUNGCAN_A", "LUNGAGETC_A", "CIGNOW_A", "DRKAVG12M_A")]

```

I re-inspected the newly created data set and found that most of the observations are missing on the lung cancer indicator, age when first diagnosed with lung cancer and Number of Cigarettes smoked on a day. These missing values are probably indicating that most of the adults in the sample do not smoke and are not diagnosed with lung cancer.   

```{r}
#Checking the new subset of data
dplyr::glimpse(CleanStep1_adult)
summary(CleanStep1_adult)
head(CleanStep1_adult)
skimr::skim(CleanStep1_adult)

```

The data has some of the responses categorized as 'Refused', 'Not Ascertained' and 'Don't Know' for all of the variables. The values of 'Refused' are 7 and 97 respectively for categorical and numerical variables. Similar values for 'Not Ascertained' are 8 and 98 and for 'Don't Know' are 9 and 99 respectively. I have coded the responses 'Refused', 'Not Ascertained', 'Don't Know' as missing (NA) for for all the variables in the data subset. 

Further, I have re-coded the values of the categorical variables as below following the code book:

SEX_A:  'Male' for '1' and 'Female' for '2'.
RACEALLP_A: 'White' for '1', 'Black' for '2', 'Asian' for '3' 'AIAN' for '4' and 'Other' for the rest following the code book.
LUNGCAN_A: 'Lung_Cancer' for '1' and 'No_Lung_Cancer' for '2'.

```{r}

FinalData_adult <- CleanStep1_adult %>%
   # Re-coding 7, 8, 9 to NA for the categorical variables
  mutate(across(c(SEX_A, RACEALLP_A, LUNGCAN_A),
                ~ na_if(.x, 7) %>% na_if(8) %>% na_if(9)))%>%
# Re-coding 97, 98, 99 to NA for the integer variables
  mutate(across(c(AGEP_A, LUNGAGETC_A, CIGNOW_A, DRKAVG12M_A),
                ~ na_if(.x, 97) %>% na_if(98) %>% na_if(99)))%>%
  
 mutate(
    # Re-coding Sex as factor for clarity
    SEX_A = factor(if_else(SEX_A == 1, 'Male', 'Female')),
    
    # Re-coding Race as factor with more descriptive labels
    RACEALLP_A = factor(case_when(
      RACEALLP_A == 1 ~ "White",
      RACEALLP_A == 2 ~ "Black",
      RACEALLP_A == 3 ~ "Asian",
      RACEALLP_A == 4 ~ "AIAN",
      TRUE ~ "Other"  # for all other races including 'Mixed Races' 
    )),
    
    # Re-coding Lung Cancer as factor 
    LUNGCAN_A = factor(case_when(
      LUNGCAN_A == 1 ~ "Lung Cancer",
      LUNGCAN_A == 2 ~ "No Lung Cancer",
      TRUE ~ as.character(LUNGCAN_A)  # Just in case there are unexpected values
    ))
 )
   
```


To understand what each variable represents at a glance, I re-coded all of the variables in the new data file as shown below. 

```{r}

FinalData_adult <- FinalData_adult %>%
  mutate(
    Sex = SEX_A,
    Race = RACEALLP_A,
    Lung_cancer=LUNGCAN_A,
    Age=AGEP_A,
    Age_Lung_cancer=LUNGAGETC_A,
    Cigarettes_No=CIGNOW_A,
    Alcohol_No=DRKAVG12M_A,
    
   )%>%
  select(-SEX_A, -RACEALLP_A, -LUNGCAN_A, -AGEP_A, -LUNGAGETC_A, -CIGNOW_A, - DRKAVG12M_A )#deleting the old columns

```

I re-ordered the categories of the Race variable so as to view the most prevailing at the top.
```{r}
FinalData_adult$Race <- factor(FinalData_adult$Race, 
                                levels = c("White", "Black", "Asian", "AIAN", "Other"))

```


Re-checking the data.

```{r}
dplyr::glimpse(FinalData_adult)
summary(FinalData_adult)
head(FinalData_adult)
skimr::skim(FinalData_adult)

```

I created separate summary tables for all the categorical variables including number and percentages of each category. The percentages match with that provided in the code book. 

```{r}

categorical_vars <- c("Sex", "Race", "Lung_cancer")

# Creating function to calculate frequencies and percentages for a categorical variable
summarize_categorical <- function(data, var_name) {
  data %>%
    mutate(!!var_name := factor(!!sym(var_name))) %>%  # Convert to factor for accurate summarization
    count(!!sym(var_name)) %>%
    mutate(Percentage = n / sum(n) * 100) %>%
    rename(Category = !!sym(var_name)) %>%
    select(Category, n, Percentage)
}

# Applying the function to each categorical variable
summary_list <- map(categorical_vars, ~summarize_categorical(FinalData_adult, .x))

# Naming the list elements with the variable names for easy access
names(summary_list) <- categorical_vars

# View summary_list containing summaries of each categorical variable
walk(names(summary_list), ~{
  cat("\nSummary for:", .x, "\n")
  print(summary_list[[.x]])
})

```

I created summary tables for the numeric variables. The frequency, minimum and maximum values match with that in the code book.

```{r}

numeric_vars <- c("Age", "Age_Lung_cancer", "Cigarettes_No", "Alcohol_No")

# Function to produce a summary for a single numeric variable
produce_summary <- function(data, var) {
  summary <- data %>%
    summarise(
      N = sum(!is.na(!!sym(var))),  # Calculate number of non-NA observations
      Mean = mean(!!sym(var), na.rm = TRUE), # Calculate mean of non-NA observations
      SD = sd(!!sym(var), na.rm = TRUE),     # Calculate standard deviation of non-NA observations
      Min = min(!!sym(var), na.rm = TRUE),   # Minimum value of non-NA observations
      Max = max(!!sym(var), na.rm = TRUE)    # Maximum value of non-NA observations 
    ) %>%
    tibble::add_column(Variable = var, .before = 1) # Display Variable as the first column on the table
  
  # Return the summary
  return(summary)
}

# Iterate over the numeric_vars list, producing and printing a summary for each variable
for (var in numeric_vars) {
  print(produce_summary(FinalData_adult, var))
}

```
I created Bar chart for the categorical variables.

```{r}

# Plot for "Sex", excluding missing values
FinalData_adult %>%
  filter(!is.na(Sex)) %>%     #excludes missing values
  ggplot(aes(x = Sex, fill = Sex)) +
    geom_bar() +
    scale_fill_manual(values = c("Male" = "lightblue", "Female" = "green")) +
    labs(title = "Distribution of Sex", x = "Sex", y = "Count")+
     theme_minimal() +
      theme(plot.title = element_text(hjust = 0.5)) # Centers the title

# Plot for "Race", excluding missing values
FinalData_adult %>%
  filter(!is.na(Race)) %>%
  ggplot(aes(x = factor(Race, levels = c("White", "Black", "Asian", "AIAN", "Other")), fill = Race)) +
    geom_bar() +
    scale_fill_manual(values = c("White" = "blue", "Black" = "red", "Asian" = "green", "AIAN" = "orange", "Other" = "purple")) +
    labs(title = "Distribution of Race", x = "Race", y = "Count") +
    theme_minimal()+
      theme(plot.title = element_text(hjust = 0.5)) # Centers the title

# Plot for "Lung_cancer", excluding missing values
FinalData_adult %>%     #excludes missing values
  filter(!is.na(Lung_cancer)) %>%
  ggplot(aes(x = Lung_cancer, fill = Lung_cancer)) +
    geom_bar() +
    scale_fill_manual(values = c("Lung Cancer" = "red", "No Lung Cancer" = "green")) +
    labs(title = "Distribution of Lung Cancer", x = "Lung Cancer Status", y = "Count")+
      theme(plot.title = element_text(hjust = 0.5)) # Centers the title
    

```

I created histogram for the numeric variables. The age histogram shows a spike at the end of the chart. As per the codebook, ages of 85 and above are grouped together and there are 1002 sample adults within this age range.

```{r}
# Listing numeric variables
numeric_vars <- c("Age", "Age_Lung_cancer", "Cigarettes_No", "Alcohol_No")

# Creating a function to generate a histogram for a given variable, excluding Missing Values
generate_histogram <- function(variable_name) {
  FinalData_adult %>%
    drop_na(!!sym(variable_name)) %>%
    ggplot(aes(x = !!sym(variable_name))) +
      geom_histogram(binwidth = 1, color = "black", fill = "lightblue") + 
      labs(title = paste("Histogram of", variable_name), x = variable_name, y = "Count") +
      theme_minimal()+
      theme(plot.title = element_text(hjust = 0.5)) # Centers the title
  
}

# Applying the function to each numeric variable
lapply(numeric_vars, generate_histogram)


```

I created bar chart to visualize prevalence of lung cancer by sex. It appears that the proportion of adults with lung cancer is similar within Males and Females. 
```{r}

# Filtering out observations with missing values in Lung_cancer or Sex
FinalData_adult_filtered <- FinalData_adult %>%
  filter(!is.na(Lung_cancer) & !is.na(Sex))

# Create the plot
ggplot(FinalData_adult_filtered, aes(x = Sex, fill = Lung_cancer)) +
  geom_bar(position = "fill") +  # "fill" shows proportions within each sex group
  scale_fill_manual(values = c("Lung Cancer" = "red", "No Lung Cancer" = "lightgreen")) +
  scale_y_continuous(labels = scales::percent_format()) +  # Converts the y-axis to percentage
  labs(title = "Lung Cancer Status by Sex",
       x = "Sex",
       y = "Percentage",
       fill = "Lung Cancer Status") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) #Centers the title

```
I created bar chart to visualize prevalence of lung cancer by race. It appears lung cancer is common in Asians compared to other races.  

```{r}
# Filter out rows with NA in Lung_cancer or Race
FinalData_adult_filtered <- FinalData_adult %>%
  filter(!is.na(Lung_cancer) & !is.na(Race))

# Create the plot
ggplot(FinalData_adult_filtered, aes(x = Race, fill = Lung_cancer)) +
  geom_bar(position = "fill") +  # Use "fill" to show proportions within each race group
  scale_y_continuous(labels = scales::percent_format()) +  # Convert the y-axis to percentage
  scale_fill_manual(values = c("Lung Cancer" = "red", "No Lung Cancer" = "lightgreen")) +
  labs(title = "Lung Cancer Status by Race",
       x = "Race",
       y = "Percentage",
       fill = "Lung Cancer Status") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability

```
I created a box plot chart to view the distribution of no. of cigarettes smoked in a day by lung cancer status of the sample adults. The median no. of cigarettes smoked by the lung cancer group is higher than the that by the group without lung cancer. 

```{r}
# Filtering out observations with missing values of Lung_cancer or Cigarettes_No
FinalData_adult_filtered <- FinalData_adult %>%
  filter(!is.na(Lung_cancer) & !is.na(Cigarettes_No))

# Creating boxplot
ggplot(FinalData_adult_filtered, aes(x = Lung_cancer, y = Cigarettes_No, fill = Lung_cancer)) +
  geom_boxplot() +
  scale_fill_manual(values = c("Lung Cancer" = "red", "No Lung Cancer" = "green")) +
  labs(title = "Number of Cigarettes Smoked by Lung Cancer Status",
       x = "Lung Cancer Status",
       y = "Number of Cigarettes") +
  theme_minimal()+
  theme(plot.title = element_text(hjust = 0.5)) #Centers the title

```

I created a box plot chart to visualize distribution of age of sample adults when they were diagnosed with lung cancer. The median age is approximately at 65 years. 

```{r}

# Filtering to include only individuals with lung cancer to show age at diagnosis
FinalData_adult_filtered <- FinalData_adult %>%
  filter(Lung_cancer == "Lung Cancer" & !is.na(Age_Lung_cancer))

# Creating the boxplot
ggplot(FinalData_adult_filtered, aes(x = Lung_cancer, y = Age_Lung_cancer, fill = Lung_cancer)) +
  geom_boxplot() +
  scale_fill_manual(values = c("Lung Cancer" = "red")) +
  labs(title = "Age at Lung Cancer Diagnosis",
       x = "Lung Cancer Status",
       y = "Age at Diagnosis") +
  theme_minimal() +
  theme(legend.position = "none")+
  theme(plot.title = element_text(hjust = 0.5)) #Centers the title

```

I created a box plot chart to view the distribution of alcohol and cigarette consumption by sex. The median of cigarette consumption is higher for the males compared to females. 

```{r}
# Reshaping the data to long format
FinalData_adult_long <- FinalData_adult %>%
  select(Sex, Alcohol_No, Cigarettes_No) %>%
  pivot_longer(cols = c(Alcohol_No, Cigarettes_No), names_to = "Substance", values_to = "Amount") %>%
  filter(!is.na(Sex), !is.na(Amount))  # Excluding Missing Values

# Create the boxplot
ggplot(FinalData_adult_long, aes(x = Sex, y = Amount, fill = Substance)) +
  geom_boxplot() +
  scale_fill_manual(values = c("Alcohol_No" = "blue", "Cigarettes_No" = "red")) +
  labs(title = "Distribution of Alcohol and Cigarettes consumption by Sex",
       x = "Sex",
       y = "Number",
       fill = "Substance") +
  theme_minimal()+
  theme(plot.title = element_text(hjust = 0.5)) #Centers the title

```

<hr>

# This section is contributed by Kelly Cao
```{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

## Producing Synthetic Data
I first loaded my packages and used tbl_summary() function to have a clearer idea of what the cleaned data looked like. I then created a synthetic data frame with data.frame() function. I included all of the variables that were included in the previously shown clean data. For any categorical data, I applied the sample() function to each newly created variable, which randomly samples the vector of choice and apply it to the object. In the line of code, I included the vector category title, number of observations, probability associated with the vector, and the replacement function. This allowed me to create variables based on the real data distribution. I then used the same sample() function for the numerical columns, and sampled it from the real columns. I was unable to use rnorm() function as many of the variables still contained NA or missing values. When attempting to create a synthetic `Age` column, it was noted that the original distribution was not normal, so I proceeded with the sample() function.

The following was performed using the MADA Course Content [Chapter 4b: Synthetic Data](https://andreashandel.github.io/MADAcourse/content/module-synthetic-data/synthetic-data-new-existing-r/synthetic-data-new-existing-r.html) as reference. 

```{r}
# Load required packages
library(dplyr)
library(purrr)
library(lubridate)
library(ggplot2)
library(here)
library(gtsummary)

#Reviewing the summary of the Data
tbl_summary(CleanStep1_adult, statistic = list(
  all_continuous() ~ "{mean}/{median}/{min}/{max}/{sd}",
  all_categorical() ~ "{n} / {N} ({p}%)"
),)

# Setting a seed for reproducibility
set.seed(123)
n_observation <- 27651

#Creating the data frame for the synthetic data
Synthetic_data <- data.frame(
  Sex = character(n_observation), 
  Race = character (n_observation), 
  Lung_cancer = character (n_observation), 
  Age = numeric(n_observation), 
  Age_Lung_Cancer = numeric(n_observation), 
  Cigarettes_No = numeric(n_observation), 
  Alcohol_No = numeric(n_observation)
)

#I then proceed to use the sample() function to reference the previous data set and apply a synthesize data set to the newly created variables in "Synthetic_data" data frame.

#Variable 1: Sex (Categorical)
Synthetic_data$Sex <- sample(c("Male", "Female", "Refused", "Don't Know"),
                              n_observation, replace = TRUE, 
                              prob =as.numeric((table(CleanStep1_adult$SEX_A))))

#Variable 2: Race (Categorical)
Synthetic_data$Race <- sample(c("White", "Black", "Asian", "AIAN", "AIAN Mixed", "Other", "Refused", "Not Ascertained", "Don't Know"),
                              n_observation, replace = TRUE, 
                              prob =as.numeric((table(CleanStep1_adult$RACEALLP_A))))

#Variable 3: Lung Cancer Status (Categorical)
Synthetic_data$Lung_cancer <- sample(c("Lung Cancer", "No Cancer", "Refused", "Don't Know"),
                              n_observation, replace = TRUE, 
                              prob =as.numeric((table(CleanStep1_adult$LUNGCAN_A))))

#As the following data sets contains a lot of NAs in it, I used the sample() function to replicate the data, even if they were normally distributed.

#Variable 4: Age (Numeric)
Synthetic_data$Age <- sample(CleanStep1_adult$AGEP_A, 
                             size = n_observation,
                             replace = TRUE)

#Variable 5: Age when Receiving Lung Cancer (Numeric)
Synthetic_data$Age_Lung_Cancer <-  sample(CleanStep1_adult$LUNGAGETC_A, 
                                    size = n_observation, 
                                    replace = TRUE)

#Variable 6: Number of Cigarette use (Numeric)
Synthetic_data$Cigarettes_No <- sample(CleanStep1_adult$CIGNOW_A, 
                                    size = n_observation, 
                                    replace = TRUE)

#Variable 7: Number of Alcohol Use (Numeric)
Synthetic_data$Alcohol_No <- sample(CleanStep1_adult$DRKAVG12M_A, 
                                    size = n_observation, 
                                    replace = TRUE)

#I then check to see if the summary of this newly created data set is comparable to previous one.
summary(Synthetic_data)
tbl_summary(Synthetic_data, statistic = list(
  all_continuous() ~ "{mean}/{median}/{min}/{max}/{sd}",
  all_categorical() ~ "{n} / {N} ({p}%)"
),)

skim(Synthetic_data)
```

## Data Exploration/ Visuals
The following tables and plots have been performed with the code provided above from Malika. I readjusted it a few times to match my newly acquired data set `Synthetic_data`.
```{r}
# Plot for "Sex", excluding missing values
Synthetic_data %>%
  filter(!is.na(Sex), Sex!="Don't Know") %>% #excludes missing values and "Don't Know"
  ggplot(aes(x = Sex, fill = Sex)) +
    geom_bar() +
    scale_fill_manual(values = c("Male" = "lightblue", "Female" = "green")) +
    labs(title = "Distribution of Sex", x = "Sex", y = "Count")+
     theme_minimal() +
      theme(plot.title = element_text(hjust = 0.5)) # Centers the title

# Plot for "Race", excluding missing values
Synthetic_data %>%
  filter(!is.na(Race)) %>%
  ggplot(aes(x = factor(Race, levels = c("White", "Black", "Asian", "AIAN", "Other")), fill = Race)) +
    geom_bar() +
    scale_fill_manual(values = c("White" = "blue", "Black" = "red", "Asian" = "green", "AIAN" = "orange", "Other" = "purple")) +
    labs(title = "Distribution of Race", x = "Race", y = "Count") +
    theme_minimal()+
      theme(plot.title = element_text(hjust = 0.5)) # Centers the title

# Plot for "Lung_cancer", excluding missing values
Synthetic_data %>%     #excludes missing values
  filter(!is.na(Lung_cancer)) %>%
  ggplot(aes(x = Lung_cancer, fill = Lung_cancer)) +
    geom_bar() +
    scale_fill_manual(values = c("Lung Cancer" = "red", "No Cancer" = "green")) +
    labs(title = "Distribution of Lung Cancer", x = "Lung Cancer Status", y = "Count")+
      theme(plot.title = element_text(hjust = 0.5)) # Centers the title

```

```{r}
# Listing numeric variables
numeric_vars <- c("Age", "Age_Lung_Cancer", "Cigarettes_No", "Alcohol_No")

# Creating a function to generate a histogram for a given variable, excluding Missing Values
generate_histogram <- function(variable_name) {
  Synthetic_data %>%
    filter(!is.na(!!sym(variable_name))) %>%
    ggplot(aes(x = !!sym(variable_name))) +
      geom_histogram(binwidth = 1, color = "black", fill = "lightblue") + 
      labs(title = paste("Histogram of", variable_name), x = variable_name, y = "Count") +
      theme_minimal()+
      theme(plot.title = element_text(hjust = 0.5)) # Centers the title
}

# Applying the function to each numeric variable
plots <- lapply(numeric_vars, generate_histogram)
plots

```

```{r}
# Filtering out observations with missing values in Lung_cancer or Sex
Synthetic_data_filtered <- Synthetic_data %>%
  filter(!is.na(Lung_cancer) & !is.na(Sex), Sex!="Don't Know")

# Create the plot
ggplot(Synthetic_data_filtered, aes(x = Sex, fill = Lung_cancer)) +
  geom_bar(position = "fill") +  # "fill" shows proportions within each sex group
  scale_fill_manual(values = c("Lung Cancer" = "red", "No Cancer" = "lightgreen")) +
  scale_y_continuous(labels = scales::percent_format()) +  # Converts the y-axis to percentage
  labs(title = "Lung Cancer Status by Sex",
       x = "Sex",
       y = "Percentage",
       fill = "Lung Cancer Status") +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5)) #Centers the title
```

```{r}
# Filter out rows with NA in Lung_cancer or Race
Synthetic_data_filtered <- Synthetic_data %>%
  filter(!is.na(Lung_cancer) & !is.na(Race))

# Create the plot
ggplot(Synthetic_data_filtered, aes(x = Race, fill = Lung_cancer)) +
  geom_bar(position = "fill") +  # Use "fill" to show proportions within each race group
  scale_y_continuous(labels = scales::percent_format()) +  # Convert the y-axis to percentage
  scale_fill_manual(values = c("Lung Cancer" = "red", "No Cancer" = "lightgreen")) +
  labs(title = "Lung Cancer Status by Race",
       x = "Race",
       y = "Percentage",
       fill = "Lung Cancer Status") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
```

```{r}
# Filtering out observations with missing values of Lung_cancer or Cigarettes_No
FinalData_adult_filtered <- Synthetic_data %>%
  filter(!is.na(Lung_cancer) & !is.na(Cigarettes_No), Lung_cancer!= "Don't Know", Lung_cancer!= "Refused")

# Creating boxplot
ggplot(FinalData_adult_filtered, aes(x = Lung_cancer, y = Cigarettes_No, fill = Lung_cancer)) +
  geom_boxplot() +
  scale_fill_manual(values = c("Lung Cancer" = "red", "No Cancer" = "green")) +
  labs(title = "Number of Cigarettes Smoked by Lung Cancer Status",
       x = "Lung Cancer Status",
       y = "Number of Cigarettes") +
  theme_minimal()+
  theme(plot.title = element_text(hjust = 0.5)) #Centers the title
```

```{r}
# Filtering to include only individuals with lung cancer to show age at diagnosis
FinalData_adult_filtered <- Synthetic_data %>%
  filter(Lung_cancer == "Lung Cancer" & !is.na(Age_Lung_Cancer), Lung_cancer!= "Don't Know", Lung_cancer!= "Refused")

# Creating the boxplot
ggplot(FinalData_adult_filtered, aes(x = Lung_cancer, y = Age_Lung_Cancer, fill = Lung_cancer)) +
  geom_boxplot() +
  scale_fill_manual(values = c("Lung Cancer" = "red")) +
  labs(title = "Age at Lung Cancer Diagnosis",
       x = "Lung Cancer Status",
       y = "Age at Diagnosis") +
  theme_minimal() +
  theme(legend.position = "none")+
  theme(plot.title = element_text(hjust = 0.5)) #Centers the title
```

```{r}
# Reshaping the data to long format
FinalData_adult_long <- Synthetic_data %>%
  select(Sex, Alcohol_No, Cigarettes_No) %>%
  pivot_longer(cols = c(Alcohol_No, Cigarettes_No), names_to = "Substance", values_to = "Amount") %>%
  filter(!is.na(Sex), !is.na(Amount), Sex!="Don't Know")  # Excluding Missing Values

# Create the boxplot
ggplot(FinalData_adult_long, aes(x = Sex, y = Amount, fill = Substance)) +
  geom_boxplot() +
  scale_fill_manual(values = c("Alcohol_No" = "blue", "Cigarettes_No" = "red")) +
  labs(title = "Distribution of Alcohol and Cigarettes consumption by Sex",
       x = "Sex",
       y = "Number",
       fill = "Substance") +
  theme_minimal()+
  theme(plot.title = element_text(hjust = 0.5)) #Centers the title
```

## Discussion and Conclusion 
When looking at the summary table, once can see that for the categorical variables, the proportions for each category are fairly similar, with the exception of the Age_Lung_Cancer variable. I was unable to replicate all of the missing data points (NA) that made up most of the observation for that variable. As for the numerical variables, the statistical information for each variables are fairly similar. 

Visually, when looking at the plots, most of them are fairly similar. The histogram visually shows the distribution that was shown with the previous data set. The bar graphs were all fairly similar. The boxplot showed greater differences, suggesting that my data set had greater variance. 


