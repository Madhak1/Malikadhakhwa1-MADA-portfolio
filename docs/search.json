[
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html",
    "href": "ml-models-exercise/ml-models-exercise.html",
    "title": "ml-models-exercise",
    "section": "",
    "text": "This is a continuation of fitting-exercise from Week 8 and Week 10. This analysis uses the cleaned data including the variable RACE from the Week 8 exercise.\nFirst, required packages are installed and loaded.\n\nlibrary(dplyr) #for data processing/cleaning\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\nlibrary(ggplot2) # for plots\nlibrary(tidymodels)\nlibrary(glmnet)\nlibrary(forcats) # for clubbing the factor variables\nlibrary(GGally)#for correlation plots\nlibrary(ranger)\nlibrary(dials)\nlibrary(patchwork)# For illustrating plots side by side\n\nSetting a random seed during analysis step\n\nrngseed = 1234\n\nData is loaded\n\n# path to data using here function\nmavoglurant &lt;- readr::read_rds(\"mavoglurant.rds\")\n\nChecking the data\n\nskimr::skim(mavoglurant)\n\n\nData summary\n\n\nName\nmavoglurant\n\n\nNumber of rows\n120\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nSEX\n0\n1\nFALSE\n2\n1: 104, 2: 16\n\n\nRACE\n0\n1\nFALSE\n4\n1: 74, 2: 36, 88: 8, 7: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nY\n0\n1\n2445.41\n961.64\n826.43\n1700.53\n2349.14\n3050.22\n5606.58\n▆▇▆▂▁\n\n\nDOSE\n0\n1\n36.46\n11.86\n25.00\n25.00\n37.50\n50.00\n50.00\n▇▁▂▁▆\n\n\nAGE\n0\n1\n33.00\n8.98\n18.00\n26.00\n31.00\n40.25\n50.00\n▅▇▃▅▅\n\n\nWT\n0\n1\n82.55\n12.52\n56.60\n73.18\n82.10\n90.10\n115.30\n▂▇▇▅▁\n\n\nHT\n0\n1\n1.76\n0.09\n1.52\n1.70\n1.77\n1.81\n1.93\n▁▃▆▇▃\n\n\n\n\n\nI combined the two levels 7 and 88 of the variable ‘RACE’ into a single level and re-coded it as 3.\n\n#Re-coding RACE categories 7 and 88 as 3\nmavoglurant &lt;- mavoglurant %&gt;%\n  mutate(RACE = fct_recode(RACE,\n                           '3' = '7',\n                           '3' = '88'))\n\n\n\nNext, I created a pairwise correlation plot for the continuous variables to check if any two variables are highly correlated.\n\n#Using ggpairs to create the correlation plot\ncor_pairs &lt;- mavoglurant[, c(\"Y\", \"DOSE\", \"AGE\", \"WT\", \"HT\")]\n\nggpairs(cor_pairs,\n        upper = list(continu = wrap(\"cor\", size = 5)),#Display correlation coefficients\n        lower = list(continuous = \"smooth\") #Display scatter plots with smooth lines\n        )\n\n\n\n\nThe correlation between DOSE and Y is observed to be 0.718, and between WT and HT, it stands at 0.600. However, these correlations do not reach the levels that would be concerning for excessive collinearity, as nothing exceeds an absolute value of 0.9. This indicates that collinearity is unlikely to be and issue for the analysis.\n\n\n\nTo mitigate the correlation effects of HT and WT, those two variables are combined into a single variable BMI. Though the units of measurements are not given for the HT and WT variables, from their valuesthose appear to be in kg and meters. Based on these metrics, a column of BMI is added to the data.\nMetric BMI Formula BMI = weight (kg) / [height (m)]^2\n\nmavoglurant &lt;- mavoglurant%&gt;%\n  mutate(BMI=WT / HT^2 )"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#mavoglurant-modeling-exercise-week-11",
    "href": "ml-models-exercise/ml-models-exercise.html#mavoglurant-modeling-exercise-week-11",
    "title": "ml-models-exercise",
    "section": "",
    "text": "This is a continuation of fitting-exercise from Week 8 and Week 10. This analysis uses the cleaned data including the variable RACE from the Week 8 exercise.\nFirst, required packages are installed and loaded.\n\nlibrary(dplyr) #for data processing/cleaning\nlibrary(tidyr) #for data processing/cleaning\nlibrary(skimr) #for nice visualization of data \nlibrary(here) #to set paths\nlibrary(ggplot2) # for plots\nlibrary(tidymodels)\nlibrary(glmnet)\nlibrary(forcats) # for clubbing the factor variables\nlibrary(GGally)#for correlation plots\nlibrary(ranger)\nlibrary(dials)\nlibrary(patchwork)# For illustrating plots side by side\n\nSetting a random seed during analysis step\n\nrngseed = 1234\n\nData is loaded\n\n# path to data using here function\nmavoglurant &lt;- readr::read_rds(\"mavoglurant.rds\")\n\nChecking the data\n\nskimr::skim(mavoglurant)\n\n\nData summary\n\n\nName\nmavoglurant\n\n\nNumber of rows\n120\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nSEX\n0\n1\nFALSE\n2\n1: 104, 2: 16\n\n\nRACE\n0\n1\nFALSE\n4\n1: 74, 2: 36, 88: 8, 7: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nY\n0\n1\n2445.41\n961.64\n826.43\n1700.53\n2349.14\n3050.22\n5606.58\n▆▇▆▂▁\n\n\nDOSE\n0\n1\n36.46\n11.86\n25.00\n25.00\n37.50\n50.00\n50.00\n▇▁▂▁▆\n\n\nAGE\n0\n1\n33.00\n8.98\n18.00\n26.00\n31.00\n40.25\n50.00\n▅▇▃▅▅\n\n\nWT\n0\n1\n82.55\n12.52\n56.60\n73.18\n82.10\n90.10\n115.30\n▂▇▇▅▁\n\n\nHT\n0\n1\n1.76\n0.09\n1.52\n1.70\n1.77\n1.81\n1.93\n▁▃▆▇▃\n\n\n\n\n\nI combined the two levels 7 and 88 of the variable ‘RACE’ into a single level and re-coded it as 3.\n\n#Re-coding RACE categories 7 and 88 as 3\nmavoglurant &lt;- mavoglurant %&gt;%\n  mutate(RACE = fct_recode(RACE,\n                           '3' = '7',\n                           '3' = '88'))\n\n\n\nNext, I created a pairwise correlation plot for the continuous variables to check if any two variables are highly correlated.\n\n#Using ggpairs to create the correlation plot\ncor_pairs &lt;- mavoglurant[, c(\"Y\", \"DOSE\", \"AGE\", \"WT\", \"HT\")]\n\nggpairs(cor_pairs,\n        upper = list(continu = wrap(\"cor\", size = 5)),#Display correlation coefficients\n        lower = list(continuous = \"smooth\") #Display scatter plots with smooth lines\n        )\n\n\n\n\nThe correlation between DOSE and Y is observed to be 0.718, and between WT and HT, it stands at 0.600. However, these correlations do not reach the levels that would be concerning for excessive collinearity, as nothing exceeds an absolute value of 0.9. This indicates that collinearity is unlikely to be and issue for the analysis.\n\n\n\nTo mitigate the correlation effects of HT and WT, those two variables are combined into a single variable BMI. Though the units of measurements are not given for the HT and WT variables, from their valuesthose appear to be in kg and meters. Based on these metrics, a column of BMI is added to the data.\nMetric BMI Formula BMI = weight (kg) / [height (m)]^2\n\nmavoglurant &lt;- mavoglurant%&gt;%\n  mutate(BMI=WT / HT^2 )"
  },
  {
    "objectID": "ml-models-exercise/ml-models-exercise.html#model-building",
    "href": "ml-models-exercise/ml-models-exercise.html#model-building",
    "title": "ml-models-exercise",
    "section": "Model Building",
    "text": "Model Building\nThe next step is the analysis phase, which involves fitting of three distinct models with all predictors. 1. Linear Model 2. LASSO Regression 3. Random Forest (RF)\n\nFirst Fit\nA linear model is fitted incorporating all the predictors.\n\nset.seed(rngseed)\n\nI created recipe for each of the linear, LASSO and Random Forest models.\nFor the LASSO model, factor variables are encoded using dummy variables and numerical variable normalized - a process that is also applied to linear model. However, for the Random Forest model, I deviated from this recipe when comparing rmse values with those listed on the Assessments page of the course website.\n\n#Preparing recipe\n#Recipe for linear and LASSO models\nrecipe_lin_LASSO&lt;-\n  recipe(Y ~ ., data = mavoglurant) %&gt;%\n  step_dummy(all_nominal(), -all_outcomes()) %&gt;%\n  step_normalize(all_predictors())\n\n#Recipe for random forest model \nrecipe_RF&lt;-\n  recipe(Y ~ ., data = mavoglurant)\n\nNext, I coded the models.\n\n# Defining Linear model\nlin_model &lt;- linear_reg()%&gt;%\n  set_engine (\"lm\")%&gt;%\n  set_mode(\"regression\")\n\n# Defining the LASSO model\nLASSO_model&lt;- linear_reg(penalty = 0.1, mixture = 1)%&gt;%\n  set_engine(\"glmnet\")%&gt;%\n  set_mode(\"regression\")\n\n#Defining Random forest model\nRF_model &lt;- rand_forest()%&gt;%\n  set_engine(\"ranger\", seed = rngseed)%&gt;%\n  set_mode(\"regression\")\n\nI set up the workflow for all the models.\n\n#workflow for linear model\nlin_workflow &lt;- workflow()%&gt;%\n  add_model(lin_model)%&gt;%\n  add_recipe(recipe_lin_LASSO)\n\n#workflow for LASSO model\nLASSO_workflow &lt;- workflow()%&gt;%\n  add_model(LASSO_model)%&gt;%\n  add_recipe(recipe_lin_LASSO)\n\n#workflow for random forest model\nRF_workflow &lt;- workflow()%&gt;%\n  add_model(RF_model)%&gt;%\n  add_recipe(recipe_RF)\n\nI fitted the models.\n\nlin_fit &lt;- lin_workflow %&gt;%\n  fit(data = mavoglurant)\n\nLASSO_fit &lt;- LASSO_workflow %&gt;%\n  fit(data = mavoglurant)\n\nRF_fit &lt;- RF_workflow %&gt;%\n  fit(data=mavoglurant)\n\nNext step is model prediction and model performance evaluation.\n\n#Computing model predictions\nlin_predicts &lt;- predict(lin_fit, new_data = mavoglurant)\nLASSO_predicts &lt;- predict(LASSO_fit, new_data = mavoglurant)\nRF_predicts &lt;- predict(RF_fit, new_data = mavoglurant)\n\n#augment to evaluate performance metric\nlin_aug &lt;- augment(lin_fit, mavoglurant)\nlin_aug %&gt;% select(Y, .pred)\n\n# A tibble: 120 × 2\n       Y .pred\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 2691. 1666.\n 2 2639. 1951.\n 3 2150. 1896.\n 4 1789. 1548.\n 5 3126. 2369.\n 6 2337. 1921.\n 7 3007. 1510.\n 8 2796. 2156.\n 9 3866. 2658.\n10 1762. 1352.\n# ℹ 110 more rows\n\nLASSO_aug &lt;- augment(LASSO_fit, mavoglurant)\nLASSO_aug %&gt;% select(Y, .pred)\n\n# A tibble: 120 × 2\n       Y .pred\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 2691. 1665.\n 2 2639. 1951.\n 3 2150. 1901.\n 4 1789. 1553.\n 5 3126. 2358.\n 6 2337. 1929.\n 7 3007. 1513.\n 8 2796. 2154.\n 9 3866. 2644.\n10 1762. 1345.\n# ℹ 110 more rows\n\nRF_aug &lt;- augment(RF_fit, mavoglurant)\nRF_aug %&gt;% select(Y, .pred)\n\n# A tibble: 120 × 2\n       Y .pred\n   &lt;dbl&gt; &lt;dbl&gt;\n 1 2691. 2233.\n 2 2639. 2431.\n 3 2150. 1939.\n 4 1789. 1822.\n 5 3126. 2698.\n 6 2337. 1974.\n 7 3007. 2326.\n 8 2796. 2600.\n 9 3866. 2965.\n10 1762. 1625.\n# ℹ 110 more rows\n\n\nSubsequent step is calculation of RMSE for all the models.\n\nlin_rmse &lt;- lin_aug %&gt;% rmse(truth=Y, .pred)\nLASSO_rmse &lt;- LASSO_aug %&gt;% rmse(truth=Y, .pred)\nRF_rmse &lt;- RF_aug %&gt;% rmse(truth = Y, .pred)\n\n\nlin_rmse_df &lt;- data.frame(Model = \"Linear\", RMSE = lin_rmse$.estimate)\nLASSO_rmse_df &lt;- data.frame(Model = \"LASSO\", RMSE = LASSO_rmse$.estimate)\nRF_rmse_df &lt;- data.frame(Model = \"Random Forest\", RMSE = RF_rmse$.estimate)\n\n#combining the three rmse's\n\nrmse_mavo &lt;- rbind(lin_rmse_df, LASSO_rmse_df, RF_rmse_df)\n#print\nrmse_mavo\n\n          Model     RMSE\n1        Linear 571.5954\n2         LASSO 571.6504\n3 Random Forest 361.6562\n\n\nThe Random Forest model outperformed the other two models in terms of RMSE metrics. Both the Linear model and LASSO yielded similar RMSE values. Examination of the correlation plot revealed that the predictors do not exhibit high collinearity. Given that the penalty for the LASSO model was set at only 0.1, this might not have been sufficient to significantly alter the estimates in comparison to those obtained from the Linear model.\nFor a visual impression of the the predicted values from all the models I plotted the observed values against all the predicted values. The plots revealed that the predicted values from the Random Forest model are closer to the line of perfect fit than the ones from linear and LASSO models.\n\n#Combining the Observed and all the predicted values from the different models  in a data frame\n\ncombined_mavo &lt;- data.frame(Observed = mavoglurant$Y, \n                           Linear=lin_predicts$.pred, \n                           LASSO = LASSO_predicts$.pred, \n                           \"Random Forest\"= RF_predicts$.pred\n                           )\n#Converting the data from wide to long format\n\nmavo_long &lt;- pivot_longer(combined_mavo, cols = -Observed, names_to = \"Model\", values_to = \"Predicted\")\n\n#Plotting of observed vs predicted data\n\n ggplot(mavo_long, aes(x=Observed, y = Predicted, color= Model, shape = Model))+\n   geom_point(size=2)+\n   geom_abline(intercept = 0, slope = 1, linetype = \"dashed\", color = \"purple\") +\n   theme_minimal()+\n   labs(title =\"Observed vs Prdicted Values\",\n        x = \"Observed\",\n        y= \"Predicted\",\n        color = \"Model\",\n        shape = \"Model\") +\n   scale_color_manual(values = c(\"Linear\" = \"red\", \"LASSO\"= \"green\", \"Random.Forest\" = \"darkgoldenrod1\"))+\n   scale_shape_manual(values = c(\"Linear\" = 17, \"LASSO\" = 16, \"Random.Forest\" = 18)) # Custom shapes\n\n\n\n\n\n\nTunning the models (without CV)\nNext, I wrote the code that tunes the LASSO and Random Forest models WITHOUT using cross-validation for resampling. For this purpose, first I set up the LASSO model to be tunable and included this model in the recipe and workflow\n\nTunning the LASSO model\n\n#Setting up the model so that the tuning function (tune())can work\nLASSO_tunable &lt;- linear_reg(penalty = tune(), mixture = 1)%&gt;%\n  set_engine(\"glmnet\")%&gt;%\n  set_mode(\"regression\")\n\n#workflow for tunable LASSO model\nLASSO_wf_tunable &lt;- workflow()%&gt;%\n  add_model(LASSO_tunable)%&gt;%\n  add_recipe(recipe_lin_LASSO) # recipe_lin_LASSO coded earlier\n\nFirst I defined the range of penalty parameters to tune over. The range is from 1E-5 to 1E2. I picked 50 values linearly spaced on a log scale for tuning.\n\n#LASSO - defining the grid of parameters from 1E-5 to 1E2\npenalty_grid &lt;- penalty(range= c(-5, 2)) %&gt;% \n\n#Picking 50 values linearly spaced on a log scale\ngrid_regular(levels=50)\n\nTo tune the grid using the workflow object, first it requires resampling with the entire data. Then the LASSO model will be tuned with the grid and the resamples prepared.\n\n#For reproducicility\nset.seed(rngseed)\n\n#Resampling the data using apparent function. This resampled data will also be used in Random Forest tuning in the following section  \nresamples &lt;- apparent(data=mavoglurant)\n\n#Tuning the LASSO model using the resamples\n\nLASSO_tune_results &lt;- LASSO_wf_tunable %&gt;%\n  tune_grid(resamples = resamples, grid = penalty_grid)\n\nVisualizing the diagnostics from the LASSO tuning results to evaluate model perfromance.\n\n#plotting the diagnostics\np1&lt;-LASSO_tune_results%&gt;%\n  autoplot()\np1\n\n\n\n\nThe model diagnostic plot reveals that LASSO performs well at lower penalty values as evidenced by the value of corresponding RMSE metrics. As the penalty value goes up, especially after a certain threshold, the model becomes more regularized and some coefficients may shrink up-to zero increasing bias and the RMSE value. As we have noticed in earlier part of the analysis, LASSO behaves similar to a linear model for very low penalty values resulting to similar values of RMSE. It is because at lower RMSE values the model is less regularized.\n\n\nTunning the Random Forest model\nFirst, I updated the model and workflow, setting the mumber of trees at 300. The tunning will focus on the parameters mtry and min_n, while all other parameters will remain at their default settings.\n\n#Setting up the model for tuning\nRF_tunable &lt;- rand_forest(trees=300, mtry = tune(), min_n = tune())%&gt;%\n  set_engine(\"ranger\", seed = rngseed)%&gt;%\n  set_mode(\"regression\")\n\n#workflow for tunable LASSO model\nRF_wf_tunable &lt;- workflow()%&gt;%\n  add_model(RF_tunable)%&gt;%\n  add_recipe(recipe_RF) # recipe_lin_LASSO coded earlier\n\nI explored 7 x 7 parameter combinations by setting a tuning grid with the grid_regular() function, and setting the range for mtry from 1 to 7, and min_n from 1 to 21, with each parameter having levels.\n\n#Defining the tuning grip for Random forest\nRF_grid &lt;- grid_regular(mtry(range=c(1,7)), min_n(range = c(1,21)), levels = 7)\n\n#Tuning the Random Forest Model:\nRF_tune_results &lt;- RF_wf_tunable %&gt;%\n  tune_grid(resamples = resamples, grid = RF_grid)#same resampled data from LASSO used\n\nVisualizing the diagnostics Random Forest tuning results.\n\n#plotting the diagnostics\np2&lt;-RF_tune_results%&gt;%\n  autoplot()\np2\n\n\n\n\nThe diagnostic plot illustrates RMSE values across various tuning parameters, revealing that optimal results are achieved with higher number of randomly selected predictrs (mtry) values and lower minimal node size (min_n) values.\n\n\n\nTunning with CV\nThis phase involves tuning of both the LASSO and Random Forest (RF) models, employing resampling via 5-fold cross-validation with 5 repeatations. First, I set up the resample object, subsequently utilizing the resamples to fine-tune both models.\n\n#For reproducibility\nset.seed(rngseed)\n\n#Create resample object with cross-validation\nresamples_cv&lt;-vfold_cv(mavoglurant, v=5, repeats = 5)\n\n#Tunning the LASSO model\nLASSO_tune_results_cv &lt;- LASSO_wf_tunable %&gt;%\n  tune_grid(resamples = resamples_cv, grid = penalty_grid)\n\n#Tunning the RF model\nRF_tune_results_cv &lt;- RF_wf_tunable %&gt;%\n  tune_grid(resamples = resamples_cv, grid = RF_grid)\n\nPlotting the tuning results of LASSO and Random Forest models.\n\n# Analyze LASSO tuning results\np3&lt;-autoplot(LASSO_tune_results_cv)\n\n# Analyze RF tuning results\np4&lt;-autoplot(RF_tune_results_cv)\n\np1+p2+p3+p4\n\n\n\n\nThe top two are the LASSO and RF model diagnostic plots before using cross-validation (CV) and the bottom two are the ones post cross-validation. In both cases, the use of CV has led to higher RMSE values. This is because CV is designed to provide a more robust estimation of a model’s performance by reducing overfitting.The initial lower RMSE values could suggest overfitting.\nComparing the pre and post cross-validation diagnostics, it appears LASSO model generally has lower RMSE values, signaling better predictive performance, particularly with smaller penalties. At a lower penalty, the LASSO model applies smaller shrinkage to the coefficients and retains more model complexity, potentially leading to lower RMSE.\nConversely, the RF model shows higher RMSE values after cross-validation. One of the reasons could be the smaller data size.RF creates each tree by using a different set of data points and subset of features. This randomness can lead to variability in models’ performance across different CV folds, especially when the data size is smaller.\nRF model performs well on data where the relationship between the features and the outcome is nonlinear and complex. However, if the true underlying model is linear or nearly linear, simpler models like LASSO might perform better.\nBased on these observations, it appears that the LASSO model performs better in terms of RMSE when appropriately penalized."
  },
  {
    "objectID": "coding-exercise/coding-exercise.html",
    "href": "coding-exercise/coding-exercise.html",
    "title": "R Coding Exercise",
    "section": "",
    "text": "This exercise explores the relationship of life expectancy with child mortality and population in African countries using the ‘gapminder’dataset found in R’s ’dslabs’ package. It is noteworthy that once the ‘dslabs’ package is installed and loaded, the dataset is available immediately for analysis. The analysis leverages the comprehensive capabilities of the ‘’tidyverse’ package for data manipulation, visualization and analysis.\nR’s help function provides insightful guidance on various datasets, including ‘gapminder’. For instance, executing ‘help(gapminder)’ in R prompts ‘??gapminder’, directing users to detailed information about this dataset.\n#load dslabs package\nlibrary(\"dslabs\")\n\nWarning: package 'dslabs' was built under R version 4.2.3\n\n#look at help file for gapminder data\nhelp(gapminder)\n\nstarting httpd help server ... done\n\n#load tidyverse pacakge\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nAs exhibited in the help window, the ‘gapminder’ dataset contains health and income outcomes across 184 countries from 1960 to 2016, details of outcomes listed below.\nThe str function pulls the structure of the actual data. As we can see below, the ‘gapminder’ data has 10545 observation and 9 variables. There are five numerical variables, infant_mortality, life_expectancy, fertility, population and gdp; three factor variables, country, continent and region and one. The year is stored as an integer data type.\n#get an overview of data structure\nstr(gapminder)\n\n'data.frame':   10545 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  115.4 148.2 208 NA 59.9 ...\n $ life_expectancy : num  62.9 47.5 36 63 65.4 ...\n $ fertility       : num  6.19 7.65 7.32 4.43 3.11 4.55 4.82 3.45 2.7 5.57 ...\n $ population      : num  1636054 11124892 5270844 54681 20619075 ...\n $ gdp             : num  NA 1.38e+10 NA NA 1.08e+11 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 4 1 1 2 2 3 2 5 4 3 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 19 11 10 2 15 21 2 1 22 21 ...\nThe summary(gapminder) provides statistical overview. For numerical columns, it presents minimum, maximum, mean, median, quartiles and missing values. For categorical or factor columns, it provides a count of the number of occurrences of each level. For example, there are 2907 observations related to the continent of Africa, 2052 related to Americas, 2679 related to Asia, 2223 related to Europe and 684 related to Ocenia.\n#get a summary of data\nsummary(gapminder)\n\n                country           year      infant_mortality life_expectancy\n Albania            :   57   Min.   :1960   Min.   :  1.50   Min.   :13.20  \n Algeria            :   57   1st Qu.:1974   1st Qu.: 16.00   1st Qu.:57.50  \n Angola             :   57   Median :1988   Median : 41.50   Median :67.54  \n Antigua and Barbuda:   57   Mean   :1988   Mean   : 55.31   Mean   :64.81  \n Argentina          :   57   3rd Qu.:2002   3rd Qu.: 85.10   3rd Qu.:73.00  \n Armenia            :   57   Max.   :2016   Max.   :276.90   Max.   :83.90  \n (Other)            :10203                  NA's   :1453                    \n   fertility       population             gdp               continent   \n Min.   :0.840   Min.   :3.124e+04   Min.   :4.040e+07   Africa  :2907  \n 1st Qu.:2.200   1st Qu.:1.333e+06   1st Qu.:1.846e+09   Americas:2052  \n Median :3.750   Median :5.009e+06   Median :7.794e+09   Asia    :2679  \n Mean   :4.084   Mean   :2.701e+07   Mean   :1.480e+11   Europe  :2223  \n 3rd Qu.:6.000   3rd Qu.:1.523e+07   3rd Qu.:5.540e+10   Oceania : 684  \n Max.   :9.220   Max.   :1.376e+09   Max.   :1.174e+13                  \n NA's   :187     NA's   :185         NA's   :2972                       \n             region    \n Western Asia   :1026  \n Eastern Africa : 912  \n Western Africa : 912  \n Caribbean      : 741  \n South America  : 684  \n Southern Europe: 684  \n (Other)        :5586\nIt is important to find out the class or type of an object in R before applying any functions and operations. Determining the object’s class with ‘class(gapminder)’ confirms that ‘gapminder’ is a ‘data.frame’, indicative of its tabular structure in R.\n#determine the type of object gapminder is\nclass(gapminder)\n\n[1] \"data.frame\"\nIn the next step of analysis, a subset named ‘africadata’ is created, containing only observations related to African countries.\n#Assigning only the African countries to a new object/variable called africadata\nafricadata &lt;- gapminder[gapminder$continent == \"Africa\", ]\nExamining ‘africadata’ with str(africadata) shows a reduction to 2907 observations. However, summary(africadata) still includes other continent categories, with zero counts. This peculiarity arises because R retains factor levels in subsets even when no observations exist for certain categories.\n#Running str for africadata\nstr(africadata)\n\n'data.frame':   2907 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  1960 1960 1960 1960 1960 1960 1960 1960 1960 1960 ...\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n $ fertility       : num  7.65 7.32 6.28 6.62 6.29 6.95 5.65 6.89 5.84 6.25 ...\n $ population      : num  11124892 5270844 2431620 524029 4829291 ...\n $ gdp             : num  1.38e+10 NA 6.22e+08 1.24e+08 5.97e+08 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n#Summary of africadata\nsummary(africadata)\n\n         country          year      infant_mortality life_expectancy\n Algeria     :  57   Min.   :1960   Min.   : 11.40   Min.   :13.20  \n Angola      :  57   1st Qu.:1974   1st Qu.: 62.20   1st Qu.:48.23  \n Benin       :  57   Median :1988   Median : 93.40   Median :53.98  \n Botswana    :  57   Mean   :1988   Mean   : 95.12   Mean   :54.38  \n Burkina Faso:  57   3rd Qu.:2002   3rd Qu.:124.70   3rd Qu.:60.10  \n Burundi     :  57   Max.   :2016   Max.   :237.40   Max.   :77.60  \n (Other)     :2565                  NA's   :226                     \n   fertility       population             gdp               continent   \n Min.   :1.500   Min.   :    41538   Min.   :4.659e+07   Africa  :2907  \n 1st Qu.:5.160   1st Qu.:  1605232   1st Qu.:8.373e+08   Americas:   0  \n Median :6.160   Median :  5570982   Median :2.448e+09   Asia    :   0  \n Mean   :5.851   Mean   : 12235961   Mean   :9.346e+09   Europe  :   0  \n 3rd Qu.:6.860   3rd Qu.: 13888152   3rd Qu.:6.552e+09   Oceania :   0  \n Max.   :8.450   Max.   :182201962   Max.   :1.935e+11                  \n NA's   :51      NA's   :51          NA's   :637                        \n                       region   \n Eastern Africa           :912  \n Western Africa           :912  \n Middle Africa            :456  \n Northern Africa          :342  \n Southern Africa          :285  \n Australia and New Zealand:  0  \n (Other)                  :  0\nFurther analysis involves creating two subsets from ‘africadata’: ‘africa_infant_life’ with ‘infant_mortality’ and ‘life_expectancy’, and ‘africa_pop_life’ with ‘population’ and ‘life_expectancy’.\n#Creating africa_infant_life which is a subset of africadata containing only 'infant_mortality' and 'life_expectancy'\n\nafrica_infant_life &lt;- africadata[,c(\"infant_mortality\", \"life_expectancy\")]\nThe structures and summaries reveal africa_infant_life has two columns, 2907 observations, and 226 missing values in infant_mortality.\n#Running str for africa_infant_life\nstr(africa_infant_life)\n\n'data.frame':   2907 obs. of  2 variables:\n $ infant_mortality: num  148 208 187 116 161 ...\n $ life_expectancy : num  47.5 36 38.3 50.3 35.2 ...\n#Summary of africa_infant_life\nsummary(africa_infant_life)\n\n infant_mortality life_expectancy\n Min.   : 11.40   Min.   :13.20  \n 1st Qu.: 62.20   1st Qu.:48.23  \n Median : 93.40   Median :53.98  \n Mean   : 95.12   Mean   :54.38  \n 3rd Qu.:124.70   3rd Qu.:60.10  \n Max.   :237.40   Max.   :77.60  \n NA's   :226\n#Creating africa_pop_life which is a subset of africadata containing only population and life_expectancy\n\nafrica_pop_life &lt;- africadata[,c(\"population\", \"life_expectancy\")]\nLikewise, the str function of africa_pop_life showed that this object also has 2907 observations and two columns. The summary function presented various quartile levels.\n#Running str for africa_pop_life\nstr(africa_pop_life)\n\n'data.frame':   2907 obs. of  2 variables:\n $ population     : num  11124892 5270844 2431620 524029 4829291 ...\n $ life_expectancy: num  47.5 36 38.3 50.3 35.2 ...\n#Summary of africa_pop_life\nsummary(africa_pop_life)\n\n   population        life_expectancy\n Min.   :    41538   Min.   :13.20  \n 1st Qu.:  1605232   1st Qu.:48.23  \n Median :  5570982   Median :53.98  \n Mean   : 12235961   Mean   :54.38  \n 3rd Qu.: 13888152   3rd Qu.:60.10  \n Max.   :182201962   Max.   :77.60  \n NA's   :51\nPlotting life expectancy against infant mortality in ‘africa_infant_life’ displays an expected negative correlation.\n#Plotting expectancy as a function of infant mortality\np1 &lt;- africa_infant_life %&gt;% ggplot(aes(x=infant_mortality, y=life_expectancy)) + geom_point() + geom_smooth(method='lm')\nplot(p1)\nPlotting life expectancy against the log of population in ‘africa_pop_life’ reveals intriguing streaks. This pattern exists because africadata contains multiple years of data on population and life expectancy for multiple countries in Africa. Each ‘streak’ might be hinting at a positive correlation between life expectancy and population within individual country over multiple years.\n#Plotting life expectancy as a function of log of population for the africa_pop_life\np2 &lt;- africa_pop_life %&gt;% ggplot(aes(x=log(population), y=life_expectancy)) + geom_point() + geom_smooth(method='lm')\nplot(p2)\nNext step is to inspect if this pattern persists even when only one year’s data with least missing values is visualized. As noticed in the summary of africadata, 226 values are missing for infant_mortality in this object. To find years with least missing values for infant mortality, following code is run. The result shows that in the object ‘africadata’, the values for infant_mortality is missing from 1960 to 1981 and again in 2016.\n#Codes to explore which years have missing data for infant mortality\n\nmissing_infmort_years &lt;- africadata %&gt;%\n  filter(is.na(infant_mortality)) %&gt;%\n  select(year) %&gt;%\n  distinct() %&gt;%\n  arrange(year)\n\nprint(missing_infmort_years)\n\n   year\n1  1960\n2  1961\n3  1962\n4  1963\n5  1964\n6  1965\n7  1966\n8  1967\n9  1968\n10 1969\n11 1970\n12 1971\n13 1972\n14 1973\n15 1974\n16 1975\n17 1976\n18 1977\n19 1978\n20 1979\n21 1980\n22 1981\n23 2016\nThe year 2000 is identified as a year without missing values to create a subset ‘africadata_2000’ from the object ‘africadata’. This new subset includes only the data for the Year 2000.\n#Creating africadata_2000 which is a subset of africadata containing data for the year 2000 only. \n\nafricadata_2000 &lt;- africadata %&gt;% filter(year == 2000)\nThe results of the str function on africadata_2000 reveals that this object contains only 51 observations and 9 variables.\n#Running str for africadata_2000\nstr(africadata_2000)\n\n'data.frame':   51 obs. of  9 variables:\n $ country         : Factor w/ 185 levels \"Albania\",\"Algeria\",..: 2 3 18 22 26 27 29 31 32 33 ...\n $ year            : int  2000 2000 2000 2000 2000 2000 2000 2000 2000 2000 ...\n $ infant_mortality: num  33.9 128.3 89.3 52.4 96.2 ...\n $ life_expectancy : num  73.3 52.3 57.2 47.6 52.6 46.7 54.3 68.4 45.3 51.5 ...\n $ fertility       : num  2.51 6.84 5.98 3.41 6.59 7.06 5.62 3.7 5.45 7.35 ...\n $ population      : num  31183658 15058638 6949366 1736579 11607944 ...\n $ gdp             : num  5.48e+10 9.13e+09 2.25e+09 5.63e+09 2.61e+09 ...\n $ continent       : Factor w/ 5 levels \"Africa\",\"Americas\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ region          : Factor w/ 22 levels \"Australia and New Zealand\",..: 11 10 20 17 20 5 10 20 10 10 ...\n#Running summary for africadata_2000\nsummary(africadata_2000)\n\n         country        year      infant_mortality life_expectancy\n Algeria     : 1   Min.   :2000   Min.   : 12.30   Min.   :37.60  \n Angola      : 1   1st Qu.:2000   1st Qu.: 60.80   1st Qu.:51.75  \n Benin       : 1   Median :2000   Median : 80.30   Median :54.30  \n Botswana    : 1   Mean   :2000   Mean   : 78.93   Mean   :56.36  \n Burkina Faso: 1   3rd Qu.:2000   3rd Qu.:103.30   3rd Qu.:60.00  \n Burundi     : 1   Max.   :2000   Max.   :143.30   Max.   :75.00  \n (Other)     :45                                                  \n   fertility       population             gdp               continent \n Min.   :1.990   Min.   :    81154   Min.   :2.019e+08   Africa  :51  \n 1st Qu.:4.150   1st Qu.:  2304687   1st Qu.:1.274e+09   Americas: 0  \n Median :5.550   Median :  8799165   Median :3.238e+09   Asia    : 0  \n Mean   :5.156   Mean   : 15659800   Mean   :1.155e+10   Europe  : 0  \n 3rd Qu.:5.960   3rd Qu.: 17391242   3rd Qu.:8.654e+09   Oceania : 0  \n Max.   :7.730   Max.   :122876723   Max.   :1.329e+11                \n                                                                      \n                       region  \n Eastern Africa           :16  \n Western Africa           :16  \n Middle Africa            : 8  \n Northern Africa          : 6  \n Southern Africa          : 5  \n Australia and New Zealand: 0  \n (Other)                  : 0\nPlotting life_expectancy as a function of infant_mortality for ‘africadata_2000’ again revealed a negative correlation between infant mortality and life expectancy.\n#Plotting life expectancy as a function of infant mortality for the africadata_2000.\n\np3 &lt;- africadata_2000 %&gt;% ggplot(aes(x=infant_mortality, y=life_expectancy)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\nLikewise, plotting life_expectancy as a function of log of population for ‘africadata_2000’ still produces streaks following the pattern of the aficadata plot.\n#Plotting life expectancy as a function of log of population for the africadata_2000\n\np4 &lt;- africadata_2000 %&gt;% ggplot(aes(x=log(population), y=life_expectancy)) + geom_point() + geom_smooth(method='lm')\nplot(p2)\nNext step is fitting of some simple models using africadata_2000. First a linear model (fit1) is fitted using life expectancy as outcome and infant mortality as predictor.\nBased on the p-value of fit1 which is less than 0.001, infant_mortality is a significant predictor of life expectancy in the African countries. IN the African countries, one infant mortality in one thousand infants decreases the life expectancy by approximately 0.19 years on an average.\nfit1 &lt;- lm(life_expectancy ~ infant_mortality, africadata_2000)\n#Printing the results of the linear model fit1\nsummary(fit1)\n\n\nCall:\nlm(formula = life_expectancy ~ infant_mortality, data = africadata_2000)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-22.6651  -3.7087   0.9914   4.0408   8.6817 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)      71.29331    2.42611  29.386  &lt; 2e-16 ***\ninfant_mortality -0.18916    0.02869  -6.594 2.83e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 6.221 on 49 degrees of freedom\nMultiple R-squared:  0.4701,    Adjusted R-squared:  0.4593 \nF-statistic: 43.48 on 1 and 49 DF,  p-value: 2.826e-08\nSubsequent step is fitting of linear model (fit2) using life expectancy as outcome and population as predictor.\nThe p-value (0.616) of population in the model fit2 is larger than 0.1. Hence, population is not a significant predictor of life expectancy in the African countries.\nfit2 &lt;- lm(life_expectancy ~ population, africadata_2000)\n#Printing the results of the linear model fit2\nsummary(fit2)\n\n\nCall:\nlm(formula = life_expectancy ~ population, data = africadata_2000)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-18.429  -4.602  -2.568   3.800  18.802 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 5.593e+01  1.468e+00  38.097   &lt;2e-16 ***\npopulation  2.756e-08  5.459e-08   0.505    0.616    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.524 on 49 degrees of freedom\nMultiple R-squared:  0.005176,  Adjusted R-squared:  -0.01513 \nF-statistic: 0.2549 on 1 and 49 DF,  p-value: 0.6159"
  },
  {
    "objectID": "coding-exercise/coding-exercise.html#this-section-is-a-contribution-by-erick-mollinedo",
    "href": "coding-exercise/coding-exercise.html#this-section-is-a-contribution-by-erick-mollinedo",
    "title": "R Coding Exercise",
    "section": "This section is a contribution by Erick Mollinedo",
    "text": "This section is a contribution by Erick Mollinedo\nFor the next part of this exercise I decided to work on the greenhouse_gases dataset from the dslabs package. The following space has the packages I used.\n\nlibrary(dslabs)\nlibrary(tidyverse)\n\nThen, I used the str() function to explore the structure of the dataframe and summary() to check the summary for each one of the variables of this dataframe.\n\n#Explore the 'greenhouse_gases' dataframe using the 'str()' and 'summary()' functions\nstr(greenhouse_gases)\n\n'data.frame':   300 obs. of  3 variables:\n $ year         : num  20 40 60 80 100 120 140 160 180 200 ...\n $ gas          : chr  \"CO2\" \"CO2\" \"CO2\" \"CO2\" ...\n $ concentration: num  278 278 277 277 278 ...\n\nsummary(greenhouse_gases)\n\n      year          gas            concentration   \n Min.   :  20   Length:300         Min.   : 260.0  \n 1st Qu.: 515   Class :character   1st Qu.: 269.7  \n Median :1010   Mode  :character   Median : 279.7  \n Mean   :1010                      Mean   : 416.2  \n 3rd Qu.:1505                      3rd Qu.: 641.0  \n Max.   :2000                      Max.   :1703.4  \n\n\nThis dataset consists of 300 observations by 3 variables: The years go from 1 to 2000 (CE) in 20 years intervals in the variable year. The gas variable lists three gases: CO2, CH4 and N2O, and the variable concentration describes the gas concentration in ppm (CO2) or ppb (CH4, N2O).\nIn this case, I was just interested in the concentrations of methane and nitrous oxide, so I created a new object gases that includes only the CH4 and N2O observations.\n\n#Used the `filter()` function to select only the observations needed from the variable `gas`. To do this I used the | operator which means \"OR\". In this case filtering for CH4 OR N2O\ngases &lt;- greenhouse_gases %&gt;% filter(gas == \"CH4\" | gas == \"N2O\")\n\nI decided to rename the values of ‘CH4’ to ‘Methane’ and ‘N2O’ to ‘Nitrous Oxide’ using the mutate() and recode() functions. And then used str() to check if the changes were applied to the dataframe.\n\n#Here I am keeping the variable `gas` the same, but renaming CH4 to \"Methane\" and N2O to \"Nitrous Oxide\" using the `recode()` function.\ngases &lt;- gases %&gt;% mutate(gas = recode(gas, \"CH4\" = \"Methane\",\n                              \"N2O\" = \"Nitrous Oxide\"))\n\n#And now using `str()` to check if the changes to this dataframe have been applied\nstr(gases)\n\n'data.frame':   200 obs. of  3 variables:\n $ year         : num  20 40 60 80 100 120 140 160 180 200 ...\n $ gas          : chr  \"Methane\" \"Methane\" \"Methane\" \"Methane\" ...\n $ concentration: num  638 631 628 628 631 ...\n\n\nFirst, I just wanted to explore what were the concentrations observed for both gases, to see if there is a chance they remained constant through time. To do this I used ggplot() and set to a histogram with geom_histogram()\n\nggplot(gases, aes(x= concentration, fill= gas))+ #Here I selected the dataset `gases`, then I set `concentration` to the x-axis and sepparated by type of gas using different colors using `fill=gas`\n  geom_histogram()+ #Set the geometry to histogram\n  scale_x_continuous(breaks = seq(0, 1800, 250))+ #Added more labels to the x-axis\n  labs(x= \"Concentration (ppb)\", y= \"Count\") #Changed the x and y-axis titles\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nBased on the previous plot, it is observed that most of the concentrations from Nitrous oxide are around 230 and 310 ppb, and for Methane most of them are between 600 and 750 ppb, but there are a few high concentrations. So, I decided to explore the trends from both gases through time, maybe the highest concentrations for Methane are from recent years. I created a plot that shows both gases using the ggplot() package using the geom_point() geometry.\n\nggplot(gases, aes(x= year, y= concentration, color= gas))+ #Here I selected the `gases` dataset, then plotted `year` in the x-axis and `concentration` in the y-axis. I used `color= gas`, so both gases are separated in the same graph\n  geom_point()+ #Used the point geometry\n  labs(x= \"Year\", y= \"Concentration (ppb)\")+ #Changed the x and y-axis labels\n  theme_classic() #I decided to use a different theme for this plot, to make it more visually appealing\n\n\n\n\nBased on the graph, it is observed that the concentration of both gases remain almost constant. However, around the year 1700, the concentration of methane started to increase and has remained high until the year 2000. For nitrous oxide, the concentration is also observed to increase around the year 1800.\nIt seems that the increase is related to the same historical event, which could be the industrialization that began around the 18th century. To explore if both gases are related and try to find a causal explanation I decided to do a simple correlation test, using the cor() function. But first I created the new objects CH4 and N2O to perform the test.\n\n#First I separated both gases into separate objects using the `filter()` function then I pulled only the `concentration` variable using the `pull()` function. I asssigned them to their respective objects.\nCH4 &lt;- gases %&gt;% filter(gas == \"Methane\") %&gt;% pull(concentration)\nN2O &lt;- gases %&gt;% filter(gas == \"Nitrous Oxide\") %&gt;% pull(concentration)\n\n#Then I checked if the new objects were correctly saved using the `summary()` function.\nsummary(CH4)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  618.7   641.3   661.5   697.9   686.0  1703.4 \n\nsummary(N2O)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  260.0   264.5   267.4   268.5   269.7   315.4 \n\n\nAnd now perform the correlation test using the ‘Pearson’ method from the cor() function\n\ncor(CH4, N2O, method = \"pearson\")\n\n[1] 0.9391766\n\n\nIt is observed that both gases are highly correlated (r= 0.939), so this could mean that the increase in the concentration in the last two to three centuries could be due to the same reason. Industrialization could be the main cause for this, but other statistical analysis and more environmental parameters can aid to infer the causality."
  },
  {
    "objectID": "data-exercise/data-exercise.html",
    "href": "data-exercise/data-exercise.html",
    "title": "Data Exercise",
    "section": "",
    "text": "This exercise explores the effectiveness of a personal finance course on the saving habits of undergraduate students at a hypothetical university. At the beginning of the first semester, freshmen are surveyed about their current savings and prior exposure to personal finance education. They are offered optional personal finance class during either semester of their freshman year. At the start of the second year, the students are surveyed again on their savings.The purpose of the study is to find if the undergraduate students who enroll in the personal finance course show statistically significant differences in saving behavior compared to other undergraduate students.\n\n#Required packageages are loaded\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(here)\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/Malikadhakhwa1-MADA-portfolio\n\nlibrary(parsnip)\n\nWarning: package 'parsnip' was built under R version 4.2.3\n\nlibrary(broom)\n\nWarning: package 'broom' was built under R version 4.2.3\n\nlibrary(plm)\n\nWarning: package 'plm' was built under R version 4.2.3\n\n\n\nAttaching package: 'plm'\n\nThe following objects are masked from 'package:dplyr':\n\n    between, lag, lead\n\n\nI set a random seed for reproducibility purpose.I assumed the sample size of the undergraduate students not having prior personal finance education to be 1000.\n\n# Set a seed for reproducibility\nset.seed(123)\n# Define the number of total students who have never attended a personal finance class or lecture before the start of the semester\nn &lt;- 1000\n\nI considered personal finance class completion as the key predictor variable and household income and age as additional predictors for the student savings in the second year. I generated synthetic data to model student’s age and household income distributions, and their decision to attend the personal finance course. I assumed the household income of students follows a normal distribution with a mean of $50000 and a standard deviation of $10000.\n\n# Generating the synthetic data\ndata &lt;- tibble(\n  #Variable 1: Unique ID for each student\n  student_id = 1:n,\n  #Variable 2: Age (numeric variable) which is normally distributed with a mean of 18, sd of 3 and a minimum of 17\n  age_year1 = pmax(17, round(rnorm(n, mean=18, sd=1))),\n    #variable 3: Household Income (Numerical variable) which is normally distributed with a mean of 50000 and sd of 10000\n  income_year1 = rnorm(n, mean = 50000, sd=10000),\n  #variable 4: Random assignment to personal finance class \n  pFinance_class = sample(c('First Semester','Second Semester','No Class'), n, replace=TRUE),\n)\n#Print a first few lines of the data\nhead(data)\n\n# A tibble: 6 × 4\n  student_id age_year1 income_year1 pFinance_class \n       &lt;int&gt;     &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;          \n1          1        17       40042. Second Semester\n2          2        18       39600. Second Semester\n3          3        20       49820. First Semester \n4          4        18       48678. No Class       \n5          5        18       24507. No Class       \n6          6        20       60406. First Semester \n\n\nTo account for the impact of pre-existing saving behaviors, I included the savings at the beginning of Year 1 as a baseline measure in the model. For this analysis, I calculated the baseline savings as 0.5% of the annual household income plus $5 for each year of the student’s age.\n\n# Define a function to simulate personal savings at the beginning of Year 1\nSavings_Year1 &lt;- function(age_year1, income_year1) {\n  #Calculation of the baseline personal saving of a student.The average savings amount is a sum of 0.5% of the household income and $5 for each year of the student's age\n  base_savings_Year1 = 0.005 * income_year1 + 5 * age_year1  \n}\n\nI added the baseline savings to the simulated data.\n\ndata &lt;- data %&gt;%\n  mutate(pSavings_year1 = round(mapply(Savings_Year1, age_year1, income_year1), 2))\n\nData summary\n\nsummary(data)\n\n   student_id       age_year1      income_year1   pFinance_class    \n Min.   :   1.0   Min.   :17.00   Min.   :19521   Length:1000       \n 1st Qu.: 250.8   1st Qu.:17.00   1st Qu.:43468   Class :character  \n Median : 500.5   Median :18.00   Median :50549   Mode  :character  \n Mean   : 500.5   Mean   :18.09   Mean   :50425                     \n 3rd Qu.: 750.2   3rd Qu.:19.00   3rd Qu.:57535                     \n Max.   :1000.0   Max.   :21.00   Max.   :83904                     \n pSavings_year1 \n Min.   :182.6  \n 1st Qu.:307.1  \n Median :343.1  \n Mean   :342.6  \n 3rd Qu.:378.5  \n Max.   :514.5  \n\n\nI employed visualization to explore the distribution of age, household income and savings of the students in Year 1.\n\n# Create a plot to visualize the age distribution\nggplot(data, aes(x = age_year1)) +\n  geom_histogram(binwidth = 1, fill=\"orange\", color=\"black\") +\n  theme_minimal() +\n  xlab(\"Age\")+\n  ylab(\"frequency\")+\n  ggtitle(\"Age Distribution\")\n\n\n\n# Create a plot to visualize the age distribution\nggplot(data, aes(x = income_year1)) +\n  geom_histogram(binwidth = 5000, fill=\"green\", color=\"black\") +\n  theme_minimal() +\n  xlab(\"Household Income\")+\n  ylab(\"frequency\")+\n  ggtitle(\"Household Income Distribution\")\n\n\n\n# Create a plot to visualize the savings distribution\nggplot(data, aes(x = pSavings_year1)) +\n  geom_histogram(binwidth = 25, fill=\"turquoise\", color=\"black\") +\n  theme_minimal() +\n  xlab(\"Savings\")+\n  ylab(\"frequency\")+\n  ggtitle(\"Savings Distribution\")\n\n\n\n\nI calculated the personal savings of students for Year 2 by considering their initial savings, change in household income in Year 2, a year increase in the student’s age and whether they attended the personal finance class. I assumed the household income for Year 2 follows a normal distribution with a mean of $51000 and a standard deviation of $10500. My hypothesis is that attending personal finance course encourages to save more. Therefore, I modeled the additional savings from attending the class in the first semester with a normal distribution, setting the mean increase at $100 and the standard deviation at $50. For those attending in the second semester, the increase follows a normal distribution with a mean of $150 and a standard deviation of $60, reflecting a potentially greater impact due to the timing of the class. I did not attribute any increase in savings to students who opted out of the class. I adjusted the effects of incremental age and the change in household income using the similar magnitude of effect as the previous year.\n\n# Function to simulate personal savings for Year 2\nSavings_Year2 &lt;- function(pSavings_year1, income_change, class) {\n   base_savings_Year2 = pSavings_year1 + 0.005 * income_change + 5  # 5 is the effect of one year increase in age\n  \n   #Additional effect of attending a personal finance class in either of the semesters.\n   class_effect =ifelse(class=='Second Semester', rnorm(1,150,60),\n                    ifelse(class=='First Semester', rnorm(1,100,50),\n                              0))\n  #Calculation of final savings. 'max' function ensures the final savings is not -ve.\n  max(0, base_savings_Year2 + class_effect)\n}\n\nI added the Year 2 components into the original dataset.\n\n#Alternative\ndata &lt;- data %&gt;%\n  mutate(\n    age_year2 = age_year1 +1,                             #Age increment by 1 year\n      income_year2 = rnorm(n, 51000, 10500),                #New household income distribution\n        income_change =  income_year2 - income_year1\n  ) \n\ndata &lt;- data %&gt;% \nmutate( pSavings_year2 = round(mapply(Savings_Year2,pSavings_year1, income_change, pFinance_class),2))\n\n#Print the first few rows of the generated data\nhead(data)\n\n# A tibble: 6 × 9\n  student_id age_year1 income_year1 pFinance_class  pSavings_year1 age_year2\n       &lt;int&gt;     &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt;     &lt;dbl&gt;\n1          1        17       40042. Second Semester           285.        18\n2          2        18       39600. Second Semester           288         19\n3          3        20       49820. First Semester            349.        21\n4          4        18       48678. No Class                  333.        19\n5          5        18       24507. No Class                  213.        19\n6          6        20       60406. First Semester            402.        21\n# ℹ 3 more variables: income_year2 &lt;dbl&gt;, income_change &lt;dbl&gt;,\n#   pSavings_year2 &lt;dbl&gt;\n\n\nPrint summary to check data structure\n\nsummary(data)\n\n   student_id       age_year1      income_year1   pFinance_class    \n Min.   :   1.0   Min.   :17.00   Min.   :19521   Length:1000       \n 1st Qu.: 250.8   1st Qu.:17.00   1st Qu.:43468   Class :character  \n Median : 500.5   Median :18.00   Median :50549   Mode  :character  \n Mean   : 500.5   Mean   :18.09   Mean   :50425                     \n 3rd Qu.: 750.2   3rd Qu.:19.00   3rd Qu.:57535                     \n Max.   :1000.0   Max.   :21.00   Max.   :83904                     \n pSavings_year1    age_year2      income_year2   income_change     \n Min.   :182.6   Min.   :18.00   Min.   :18145   Min.   :-44163.8  \n 1st Qu.:307.1   1st Qu.:18.00   1st Qu.:44224   1st Qu.:-10164.4  \n Median :343.1   Median :19.00   Median :50316   Median :   570.1  \n Mean   :342.6   Mean   :19.09   Mean   :50921   Mean   :   496.2  \n 3rd Qu.:378.5   3rd Qu.:20.00   3rd Qu.:58051   3rd Qu.: 10121.1  \n Max.   :514.5   Max.   :22.00   Max.   :86921   Max.   : 47961.8  \n pSavings_year2 \n Min.   :205.9  \n 1st Qu.:367.6  \n Median :438.2  \n Mean   :437.9  \n 3rd Qu.:504.8  \n Max.   :709.4  \n\n\nI generated a box plot to visualize the effect of the personal finance class on student’s savings. Additionally, I created a scatter plot to examine the relationship between household income and student’s savings stratified by attendance of personal finance class. These plots illustrate the underlying pattern within our synthesized data.\n\n# Create box plot to visualize the effect of personal finance class on savings\nggplot(data, aes(x = pFinance_class, y = pSavings_year2 , fill = pFinance_class)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"No Class\" = \"red\",\n                               \"First Semester\" = \"lightblue\",\n                               \"Second Semester\"=\"lightgreen\"))+\n  theme_minimal() +\n  labs(title = \"Personal Savings post Finance Class\",\n       x = \"Finance Class Attendance\",\n       y = \"Personal Savings in Year 2\")\n\n\n\n#Plot savings vs household income grouped by personal finance class\nggplot(data, aes(x=income_year2, y=pSavings_year2, color=pFinance_class))+\n  geom_point() +\n  theme_minimal()+\n  labs(title = \"Personal Savings vs. Income in Year 2\",\n       x=\"Income in Year 2\",\n       y=\"Personal Savings\",\n       color = \"Personal Finance Class\")+\n  scale_color_manual(values=c(\"No Class\"=\"red\",\n                     \"First Semester\" = \"blue\",\n                     \"Second Semester\"=\"green\"))\n\n\n\n\nI saved the simulated data in a csv file.\n\n#Save the simulated data to a CSV file\nwrite_csv(data, here(\"data.csv\"))\n\nI calculated students’ average savings in the second year based on the personal finance class attended.\n\neffect_analysis &lt;- data %&gt;%\n  group_by(pFinance_class) %&gt;%\n  summarize(\n    avg_savings = mean(pSavings_year2),\n    sd_savings = sd(pSavings_year2)\n  )\nprint(effect_analysis)\n\n# A tibble: 3 × 3\n  pFinance_class  avg_savings sd_savings\n  &lt;chr&gt;                 &lt;dbl&gt;      &lt;dbl&gt;\n1 First Semester         447.       71.8\n2 No Class               352.       55.9\n3 Second Semester        497.       78.3\n\n\nI fitted a linear model to the synthetic data to assess Year 2 savings, using enrollment of the personal finance class as the primary predictor, along with initial savings and changes in household income. My aim is to determine whether the model accurately recover the parameters I used to generate the data.\n\n#Fit linear model with not taking personal finance class as reference\ndata$pFinance_class&lt;-as.factor(data$pFinance_class)\ndata$pFinance_class&lt;-relevel(data$pFinance_class, ref = \"No Class\")\nmodel1&lt;-linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  parsnip::fit(pSavings_year2 ~ pFinance_class + pSavings_year1 + income_change, data=data)\ntidy(model1)\n\n# A tibble: 5 × 5\n  term                           estimate std.error statistic   p.value\n  &lt;chr&gt;                             &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)                     7.33    14.0          0.526 5.99e-  1\n2 pFinance_classFirst Semester   97.8      3.67        26.6   1.71e-118\n3 pFinance_classSecond Semester 149.       3.50        42.5   1.34e-225\n4 pSavings_year1                  0.993    0.0397      25.0   1.44e-107\n5 income_change                   0.00501  0.000135    37.0   2.03e-189\n\n\nSummary of model’s overall statistics\n\nglance(model1)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic   p.value    df logLik    AIC    BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1     0.758         0.757  45.5      779. 1.32e-304     4 -5234. 10480. 10510.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\n\nThe estimates are statistically significant and closely align with the parameters set during the data generation process. Enrollment in personal finance classes during the first and second semester led to an increase in personal savings approximately by approximately 98 and 149, respectively. I set the amounts at 100 and 150 respectively in the simulation.\nI applied a fixed effect model to determine if it would yield consistent results with those observed from the initial analysis. I converted teh data to ‘long format’ to perform the fixed effect analysis.\n\n# Create a time variable and reshape the data to a long format\ndata_long &lt;- data %&gt;%\n  #Year 1 data\n  mutate(time=1, pFinance_class = \"No Class\") %&gt;%\n  select(student_id, time, age=age_year1, income=income_year1, pSavings=pSavings_year1, pFinance_class = pFinance_class) %&gt;%\n  #Year 2 data  \n  bind_rows(\n    data %&gt;% \n      mutate(time=2) %&gt;%\n      select(student_id, time, age=age_year2, income= income_year2, pSavings=pSavings_year2, pFinance_class)\n  ) %&gt;%\n    mutate(pFinance_class = as.factor(pFinance_class))\n  \n  #Check the structure\n  head(data_long)\n\n# A tibble: 6 × 6\n  student_id  time   age income pSavings pFinance_class\n       &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt; &lt;fct&gt;         \n1          1     1    17 40042.     285. No Class      \n2          2     1    18 39600.     288  No Class      \n3          3     1    20 49820.     349. No Class      \n4          4     1    18 48678.     333. No Class      \n5          5     1    18 24507.     213. No Class      \n6          6     1    20 60406.     402. No Class      \n\n\nI applied fixed effect model to the long format of data.\n\n# First, convert the data frame to a pdata.frame, which is required for plm functions.\ndata_panel &lt;- pdata.frame(data_long, index = c(\"student_id\", \"time\"))\n\n#Setting not attending personal finance class as the reference for the analysis\ndata_panel$pFinance_class &lt;- relevel(data_panel$pFinance_class, ref = \"No Class\")\n\n# Fit a fixed effects model\nfe_model &lt;- plm(pSavings ~ pFinance_class + income + age + factor(time),\n                data = data_panel,\n                model = \"within\")\nsummary(fe_model)\n\nOneway (individual) effect Within Model\n\nCall:\nplm(formula = pSavings ~ pFinance_class + income + age + factor(time), \n    data = data_panel, model = \"within\")\n\nBalanced Panel: n = 1000, T = 2, N = 2000\n\nResiduals:\n       Min.     1st Qu.      Median     3rd Qu.        Max. \n-8.9745e+01 -9.6796e+00  4.6633e-14  9.6796e+00  8.9745e+01 \n\nCoefficients: (1 dropped because of singularities)\n                                Estimate Std. Error t-value Pr(&gt;|t|)    \npFinance_classFirst Semester  9.7813e+01 3.6691e+00 26.6588  &lt; 2e-16 ***\npFinance_classSecond Semester 1.4864e+02 3.4957e+00 42.5201  &lt; 2e-16 ***\nincome                        5.0267e-03 9.6144e-05 52.2829  &lt; 2e-16 ***\nage                           4.9795e+00 2.6179e+00  1.9021  0.05745 .  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nTotal Sum of Squares:    10278000\nResidual Sum of Squares: 1029900\nR-Squared:      0.89979\nAdj. R-Squared: 0.79889\nF-statistic: 2235.9 on 4 and 996 DF, p-value: &lt; 2.22e-16\n\n\nThe fixed effect analysis produced results that reflected those from the initial model."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html",
    "href": "fitting-exercise/fitting-exercise.html",
    "title": "fitting-exercise",
    "section": "",
    "text": "In this exercise, a model is fitted to a data set (mavoglurant_A2121_nmpk) from the R package nlmixr2data First, required packages are installed and loaded.\n\nlibrary(readxl) #for loading Excel files\n\nWarning: package 'readxl' was built under R version 4.2.3\n\nlibrary(dplyr) #for data processing/cleaning\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/Malikadhakhwa1-MADA-portfolio\n\nlibrary(ggplot2) # for plots\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(gtsummary)# for summary tables\n\nWarning: package 'gtsummary' was built under R version 4.2.3\n\nlibrary(patchwork) #for combine plots\n\nWarning: package 'patchwork' was built under R version 4.2.3\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.2.3\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n\n\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.1     ✔ tibble       3.2.1\n✔ infer        1.0.6     ✔ tune         1.1.2\n✔ modeldata    1.3.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.0.1\n✔ purrr        1.0.2     ✔ yardstick    1.3.0\n✔ recipes      1.0.9     \n\n\nWarning: package 'broom' was built under R version 4.2.3\n\n\nWarning: package 'dials' was built under R version 4.2.3\n\n\nWarning: package 'scales' was built under R version 4.2.3\n\n\nWarning: package 'infer' was built under R version 4.2.3\n\n\nWarning: package 'modeldata' was built under R version 4.2.3\n\n\nWarning: package 'parsnip' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'recipes' was built under R version 4.2.3\n\n\nWarning: package 'rsample' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tune' was built under R version 4.2.3\n\n\nWarning: package 'workflows' was built under R version 4.2.3\n\n\nWarning: package 'workflowsets' was built under R version 4.2.3\n\n\nWarning: package 'yardstick' was built under R version 4.2.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ recipes::all_double()  masks gtsummary::all_double()\n✖ recipes::all_factor()  masks gtsummary::all_factor()\n✖ recipes::all_integer() masks gtsummary::all_integer()\n✖ recipes::all_logical() masks gtsummary::all_logical()\n✖ recipes::all_numeric() masks gtsummary::all_numeric()\n✖ purrr::discard()       masks scales::discard()\n✖ dplyr::filter()        masks stats::filter()\n✖ dplyr::lag()           masks stats::lag()\n✖ recipes::step()        masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\nlibrary(rsample)\nlibrary(glmnet)\n\nWarning: package 'glmnet' was built under R version 4.2.3\n\n\nLoading required package: Matrix\n\n\nWarning: package 'Matrix' was built under R version 4.2.3\n\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nLoaded glmnet 4.1-8\n\n\nSetting a random seed during analysis step\n\nrngseed = 1234\n\nData is loaded\n\n# path to data using here function\ndata_location &lt;- here::here(\"fitting-exercise\",\"Mavoglurant_A2121_nmpk.csv\")\nrawdata &lt;- read.csv(data_location)\n\nChecking the data\n\nhead(rawdata)\n\n   ID CMT EVID EVI2 MDV  DV  LNDV AMT  TIME DOSE OCC RATE AGE SEX RACE   WT\n1 793   1    1    1   1   0 0.000  25 0.000   25   1   75  42   1    2 94.3\n2 793   2    0    0   0 491 6.196   0 0.200   25   1    0  42   1    2 94.3\n3 793   2    0    0   0 605 6.405   0 0.250   25   1    0  42   1    2 94.3\n4 793   2    0    0   0 556 6.321   0 0.367   25   1    0  42   1    2 94.3\n5 793   2    0    0   0 310 5.737   0 0.533   25   1    0  42   1    2 94.3\n6 793   2    0    0   0 237 5.468   0 0.700   25   1    0  42   1    2 94.3\n        HT\n1 1.769997\n2 1.769997\n3 1.769997\n4 1.769997\n5 1.769997\n6 1.769997\n\n\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n2678\n\n\nNumber of columns\n17\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n17\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nID\n0\n1\n858.81\n34.08\n793.00\n832.00\n860.00\n888.00\n915.00\n▅▆▇▇▇\n\n\nCMT\n0\n1\n1.93\n0.26\n1.00\n2.00\n2.00\n2.00\n2.00\n▁▁▁▁▇\n\n\nEVID\n0\n1\n0.07\n0.26\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nEVI2\n0\n1\n0.16\n0.70\n0.00\n0.00\n0.00\n0.00\n4.00\n▇▁▁▁▁\n\n\nMDV\n0\n1\n0.09\n0.29\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nDV\n0\n1\n179.93\n226.28\n0.00\n23.52\n74.20\n283.00\n1730.00\n▇▂▁▁▁\n\n\nLNDV\n0\n1\n4.08\n1.88\n0.00\n3.16\n4.31\n5.64\n7.46\n▃▃▇▇▅\n\n\nAMT\n0\n1\n2.76\n10.32\n0.00\n0.00\n0.00\n0.00\n50.00\n▇▁▁▁▁\n\n\nTIME\n0\n1\n5.85\n8.91\n0.00\n0.58\n2.25\n6.36\n48.22\n▇▁▁▁▁\n\n\nDOSE\n0\n1\n37.37\n12.05\n25.00\n25.00\n37.50\n50.00\n50.00\n▇▁▁▁▇\n\n\nOCC\n0\n1\n1.38\n0.49\n1.00\n1.00\n1.00\n2.00\n2.00\n▇▁▁▁▅\n\n\nRATE\n0\n1\n16.55\n61.88\n0.00\n0.00\n0.00\n0.00\n300.00\n▇▁▁▁▁\n\n\nAGE\n0\n1\n32.90\n8.87\n18.00\n26.00\n31.00\n40.00\n50.00\n▆▇▅▅▅\n\n\nSEX\n0\n1\n1.13\n0.33\n1.00\n1.00\n1.00\n1.00\n2.00\n▇▁▁▁▁\n\n\nRACE\n0\n1\n7.41\n21.97\n1.00\n1.00\n1.00\n2.00\n88.00\n▇▁▁▁▁\n\n\nWT\n0\n1\n83.16\n12.48\n56.60\n73.30\n82.60\n90.60\n115.30\n▂▇▇▅▁\n\n\nHT\n0\n1\n1.76\n0.08\n1.52\n1.71\n1.78\n1.82\n1.93\n▁▃▆▇▃\n\n\n\n\n\nNext, three plots of DV over time stratified by the three Dose levels are created to have a visual inspection of the data. These plots are re-created by grouping the observations by ID following Dr. Handel’s codes in solution to module 8 Exercise.\n\n#exploring data  \n\np1&lt;- rawdata %&gt;% ggplot()+\n      geom_line(aes(x= TIME, y=DV, group = as.factor(ID), color= as.factor(DOSE))) +\n      facet_wrap(~DOSE, scales = \"free_y\")\np1\n\n\n\n\nThe lines are not smooth. As informed in the topic, the reason for this could be that some individuals potentially have received the drug more than once, which is indicated by having both entries with OCC=1 and OCC=2. However, in absence of information on the OCC values, the analysis looks into the data set with OCC=1 only. A subset data frame is created keeping only those observations for which OCC has a value of ‘1’\n\n#Creating a sub set of data including observations with OCC=1\ndataclean_step1 &lt;- rawdata %&gt;% \n                    dplyr::filter(OCC==1)\nskimr::skim(dataclean_step1)\n\n\nData summary\n\n\nName\ndataclean_step1\n\n\nNumber of rows\n1665\n\n\nNumber of columns\n17\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n17\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nID\n0\n1\n850.97\n36.15\n793.00\n819.00\n849.00\n882.00\n915.00\n▇▇▆▆▆\n\n\nCMT\n0\n1\n1.93\n0.26\n1.00\n2.00\n2.00\n2.00\n2.00\n▁▁▁▁▇\n\n\nEVID\n0\n1\n0.07\n0.26\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nEVI2\n0\n1\n0.07\n0.26\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nMDV\n0\n1\n0.10\n0.30\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nDV\n0\n1\n176.25\n221.34\n0.00\n20.50\n70.30\n285.00\n1550.00\n▇▂▁▁▁\n\n\nLNDV\n0\n1\n4.02\n1.92\n0.00\n3.02\n4.25\n5.65\n7.35\n▃▃▇▇▅\n\n\nAMT\n0\n1\n2.63\n9.95\n0.00\n0.00\n0.00\n0.00\n50.00\n▇▁▁▁▁\n\n\nTIME\n0\n1\n6.43\n10.03\n0.00\n0.53\n2.25\n8.20\n48.22\n▇▁▁▁▁\n\n\nDOSE\n0\n1\n36.52\n11.73\n25.00\n25.00\n37.50\n50.00\n50.00\n▇▁▂▁▇\n\n\nOCC\n0\n1\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\nRATE\n0\n1\n15.72\n59.63\n0.00\n0.00\n0.00\n0.00\n300.00\n▇▁▁▁▁\n\n\nAGE\n0\n1\n33.11\n8.98\n18.00\n26.00\n31.00\n41.00\n50.00\n▅▇▃▅▅\n\n\nSEX\n0\n1\n1.14\n0.34\n1.00\n1.00\n1.00\n1.00\n2.00\n▇▁▁▁▁\n\n\nRACE\n0\n1\n6.98\n21.25\n1.00\n1.00\n1.00\n2.00\n88.00\n▇▁▁▁▁\n\n\nWT\n0\n1\n82.36\n12.43\n56.60\n73.10\n82.10\n90.10\n115.30\n▂▇▇▅▁\n\n\nHT\n0\n1\n1.76\n0.09\n1.52\n1.70\n1.77\n1.81\n1.93\n▁▃▆▇▃\n\n\n\n\n\nAgain, a plot of DV over time stratified by Dose is created.\n\n#p1.1&lt;- dataclean_step1 %&gt;% ggplot()+\n #     geom_line(aes(x= TIME, y=DV, group = as.factor(ID), color= as.factor(DOSE))) +\n  #    facet_wrap(~DOSE, scales = \"free_y\")\n#p1.1\n\nNext, two subsets data frame are created. In the first subset, observations wherein TIME=0 are dropped followed by computation of a variable Y which sums up the DV values for each individual based on ID. This resulted into a data frame of size 120 x 2 containing columns for ID and Y. In the second subset, only those observations are kept for which TIME=0. This second sub set has a size of 120 x 17. Finally these two data subsets are joined to create a new data frame of size 120 x 18.\n\n#Creating a subset excluding the observations with TIME=0\ndatasubset_1 &lt;- dataclean_step1 %&gt;% dplyr::filter(TIME != 0) %&gt;%\n  #Grouping by ID\n   dplyr::group_by(ID) %&gt;%\n  #Creating variable Y, which is sum of the DV variables by ID\n      dplyr::summarize(Y=sum(DV, na.rm = TRUE), .groups = \"drop\")\n\n#Creating a subset including only observations with TIME=0 \ndatasubset_2 &lt;- dataclean_step1 %&gt;% \n                    dplyr::filter(TIME==0)\n\n#Inner joining the two subsets to create a new data frame \ndata_joined &lt;- inner_join(datasubset_1, datasubset_2, by = \"ID\")\n#skimr::skim(data_joined)\n\nA final data set is created by keeping only the variables Y, DOSE, AGE, SEX, RACE, WT, HT. DOSE, SEX and RACE are coded as factors.\n\n#sub set of data_joined keeping only the required variables\ndata_final &lt;- data_joined %&gt;%\n  select(Y, DOSE, AGE, SEX, RACE, WT, HT) %&gt;%\n  #converting SEX, RACE and DOSE as factors\n  mutate(across (c(SEX, RACE), as.factor))\n\nskimr::skim(data_final)\n\n\nData summary\n\n\nName\ndata_final\n\n\nNumber of rows\n120\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nSEX\n0\n1\nFALSE\n2\n1: 104, 2: 16\n\n\nRACE\n0\n1\nFALSE\n4\n1: 74, 2: 36, 88: 8, 7: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nY\n0\n1\n2445.41\n961.64\n826.43\n1700.53\n2349.14\n3050.22\n5606.58\n▆▇▆▂▁\n\n\nDOSE\n0\n1\n36.46\n11.86\n25.00\n25.00\n37.50\n50.00\n50.00\n▇▁▂▁▆\n\n\nAGE\n0\n1\n33.00\n8.98\n18.00\n26.00\n31.00\n40.25\n50.00\n▅▇▃▅▅\n\n\nWT\n0\n1\n82.55\n12.52\n56.60\n73.18\n82.10\n90.10\n115.30\n▂▇▇▅▁\n\n\nHT\n0\n1\n1.76\n0.09\n1.52\n1.70\n1.77\n1.81\n1.93\n▁▃▆▇▃\n\n\n\n\n\nThe data summary shows that SEX has 2 levels and RACE has 4 levels. The level 88 of RACE has 8 observations and 7 has 2 observations. In absence of the codebook, it is unclear the reason of naming those levels with numerical values distant from the other two names with top counts. This will be kept in the data for further analyses.\nExploratory Data Analysis\nA table is created for descriptive analysis by Dose.\n\n# Creating a table\ntable1 &lt;- tbl_summary(\n  data_final,\n  by = DOSE, # Stratify summary by DOSE\n  type = list(\n    DOSE ~ \"categorical\", #Specifying DOSE as categorical\n    SEX ~ \"categorical\",  #Specifying SES as categorical\n    RACE ~ \"categorical\", #Specifying RACE as categorical\n    Y ~ \"continuous2\",\n    AGE ~ \"continuous2\",\n    WT ~ \"continuous2\",\n    HT ~ \"continuous2\"\n  ),\n  statistic = list(\n    all_continuous() ~ c(\"{mean} ({sd})\", \"{min}, {max}\"), # Statistics for continuous variables\n    all_categorical() ~ \"{n} ({p}%)\"), # Statistics for categorical variables\n  missing = \"no\" # Option to exclude missing data in summary\n)\n\n# Display the table\ntable1\n\n\n\n\n\n  \n    \n      Characteristic\n      25, N = 591\n      37.5, N = 121\n      50, N = 491\n    \n  \n  \n    Y\n\n\n\n        Mean (SD)\n1,783 (601)\n2,464 (488)\n3,239 (787)\n        Range\n826, 3,866\n1,801, 3,463\n1,949, 5,607\n    AGE\n\n\n\n        Mean (SD)\n32 (9)\n36 (10)\n33 (9)\n        Range\n18, 49\n19, 50\n18, 49\n    SEX\n\n\n\n        1\n49 (83%)\n10 (83%)\n45 (92%)\n        2\n10 (17%)\n2 (17%)\n4 (8.2%)\n    RACE\n\n\n\n        1\n32 (54%)\n10 (83%)\n32 (65%)\n        2\n21 (36%)\n2 (17%)\n13 (27%)\n        7\n1 (1.7%)\n0 (0%)\n1 (2.0%)\n        88\n5 (8.5%)\n0 (0%)\n3 (6.1%)\n    WT\n\n\n\n        Mean (SD)\n81 (12)\n81 (11)\n84 (13)\n        Range\n58, 111\n64, 102\n57, 115\n    HT\n\n\n\n        Mean (SD)\n1.76 (0.09)\n1.75 (0.10)\n1.76 (0.08)\n        Range\n1.56, 1.91\n1.56, 1.91\n1.52, 1.93\n  \n  \n  \n    \n      1 n (%)\n    \n  \n\n\n\n\nA visual inspection of distribution of continuous variables is performed by plotting histograms.\n\n# Plotting histograms for all continuous variables in a grid\n\nplot1 &lt;-\n  data_final %&gt;%\n  select(Y, AGE, WT, HT) %&gt;%\n  pivot_longer(everything()) %&gt;%\n  mutate(name = factor(name, levels = c(\"Y\", \"AGE\", \"WT\", \"HT\"))) %&gt;%  #Keeps the order of plot\n  ggplot(aes(x = value, fill = name)) +\n  geom_histogram(alpha = 0.5, color=\"black\") +\n  facet_wrap(~name, scales = \"free\") +\n  scale_fill_manual(values = c(\"Y\" = \"lightgreen\", \"AGE\" = \"dodgerblue\", \"WT\" = \"grey\", \"HT\" = \"salmon\")) +\n  theme_minimal()\nplot1\n\n\n\n#Saving the figure in the folder\nplot1_file &lt;- here(\"fitting-exercise\", \"hist_plots.png\")\nggsave(filename = plot1_file, plot=plot1, bg=\"white\")\n\nBar charts are plotted for visual inspection of distribution of factor variables. The bar chart indicates smaller representation of Dose 37.5, Sex level of 2 and Races 7 and 88 in the data.\n\n#creating a combined plot for DOSE, SEX and RACE. For this plot DOSE is treated as a factor as it has only 3 levels.\nplot2 &lt;- \n  data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Convert DOSE to factor here\n  select(DOSE, SEX, RACE) %&gt;%\n  pivot_longer(everything(), names_to = \"name\", values_to = \"value\") %&gt;%\n  mutate(name = factor(name, levels = c(\"DOSE\", \"SEX\", \"RACE\"))) %&gt;%\n  ggplot(aes(x = value, fill = name)) +\n  geom_bar(alpha = 0.5, color = \"black\") +\n  facet_wrap(~name, scales = \"free\") +\n  scale_fill_manual(values = c(\"DOSE\" = \"lightgreen\", \"SEX\" = \"salmon\", \"RACE\" = \"skyblue\"))\nplot2\n\n\n\n#Saving the figure in the folder\nplot2_file &lt;- here(\"fitting-exercise\", \"factor_vars_plots.png\")\nggsave(filename = plot2_file, plot=plot2, bg=\"white\")\n\nSaving 7 x 5 in image\n\n\nBox plot for distribution of Y by Dose is created.The box plot suggests outlier values of Y for doses 25 and 50.\n\nplot3 &lt;- data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Converting DOSE to factor only for the plot\n  ggplot(aes(x = DOSE, y = Y, fill = DOSE)) + \n  geom_boxplot() + \n  labs(title = \"Distribution of Y by DOSE\", x = \"DOSE\", y = \"Y\") +\n  theme_minimal()\n\nplot3\n\n\n\n#Saving the figure in the folder\nplot3_file &lt;- here(\"fitting-exercise\", \"Y_Dose.png\")\nggsave(filename = plot3_file, plot=plot3, bg=\"white\")\n\nSaving 7 x 5 in image\n\n\nNext, Scatter plot is created for Y by Age stratified by Dose. For doses 37.5 and 50, the plot indicates a linear increase in Y as Age increases. For the dose of 25, such relationship is negative.\n\nplot4 &lt;- data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Convert DOSE to factor here\n  ggplot(aes(x = AGE, y = Y, group = DOSE, col = DOSE)) +\n  geom_point() + \n  geom_smooth(method = lm, se = FALSE) + # Add a linear regression line\n  scale_color_viridis_d(option = \"plasma\", end = .7)+\n  labs(title = \"Scatterplot of Y vs. AGE\", x = \"Age\", y = \"Total Drug (Y)\") +\n  theme_minimal()\n\nplot4\n\n\n\n#Saving the figure in the folder\nplot4_file &lt;- here(\"fitting-exercise\", \"Y_Age_Dose.png\")\nggsave(filename = plot4_file, plot=plot4, bg=\"white\")\n\nScatter plot is created for Y by HT stratified by Dose. For all the doses the plot indicates a decline in Y as HT increases.\n\nplot5 &lt;- data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Convert DOSE to factor here\n  ggplot(aes(x = HT, y = Y, group = DOSE, col = DOSE)) +\n  geom_point() + \n  geom_smooth(method = lm, se = FALSE) + # Add a linear regression line\n  scale_color_viridis_d(option = \"plasma\", end = .7)+\n  labs(title = \"Scatterplot of Y vs. HT\", x = \"HT\", y = \"Total Drug (Y)\") +\n  theme_minimal()\n\nplot5\n\n\n\n#Saving the figure in the folder\nplot5_file &lt;- here(\"fitting-exercise\", \"Y_HT_Dose.png\")\nggsave(filename = plot5_file, plot=plot5, bg=\"white\")\n\nScatter plot is created for Y by WT stratified by Dose. As with Y and HT, a decline in Y is observed as WT decreased for all levels of Dose.\n\nplot6&lt;-data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Convert DOSE to factor here\n  ggplot(aes(x = WT, y = Y, group = DOSE, col = DOSE)) +\n  geom_point() + \n  geom_smooth(method = lm, se = FALSE) + # Add a linear regression line\n  scale_color_viridis_d(option = \"plasma\", end = .7)+\n  labs(title = \"Scatterplot of Y vs. WT\", x = \"WT\", y = \"Total Drug (Y)\") +\n  theme_minimal()\n\nplot6\n\n\n\n#Saving the figure in the folder\nplot6_file &lt;- here(\"fitting-exercise\", \"Y_WT_Dose.png\")\nggsave(filename = plot6_file, plot=plot6, bg=\"white\")\n\nVisual inspection of correlation between the continuous variables is performed. The scatterplot matrix indicates a linear correlation between WT and HT.\n\n# Using the pairs function for selected variables\nplot7 &lt;- pairs(data_final[, c(\"Y\", \"AGE\", \"WT\", \"HT\")], \n      main = \"Pairwise Scatterplot Matrix\")\n\n\n\nplot7\n\nNULL\n\n#Saving the figure in the folder\nplot7_file &lt;- here(\"fitting-exercise\", \"Pair_matrix.png\")\nggsave(filename = plot7_file, plot=plot6, bg=\"white\")\n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nA linear model is fitted to the continuous outcome (Y) using the main predictor of interest DOSE with the help of the recommended website https://www.tidymodels.org/start/models/.\n\n#using linear regression function from tidymodels to regress Y on DOSE\n#The default for linear_reg() is \"lm\" for OLS\nlm_dose &lt;- linear_reg() %&gt;% set_engine(\"lm\") %&gt;% fit(Y ~ DOSE, data = data_final)\n#Using tidy for better format of the result table\ntidy(lm_dose)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    323.     199.        1.62 1.07e- 1\n2 DOSE            58.2      5.19     11.2  2.69e-20\n\n\nThe estimates suggests a positive relationship between the Y and DOSE indicating a unit increase in DOSE increases Y by 58.21 units.\nRMSE is computed for this model with the help of ChatGPT.\n\n#First predict using the model\nlm_dose_pred &lt;- predict(lm_dose, new_data = data_final)%&gt;%\n  bind_cols(data_final) #adds the predicted values to the same dataframe\n\nlm_dose_pred\n\n# A tibble: 120 × 8\n   .pred     Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1778. 2691.    25    42 1     2      94.3  1.77\n 2 1778. 2639.    25    24 1     2      80.4  1.76\n 3 1778. 2150.    25    31 1     1      71.8  1.81\n 4 1778. 1789.    25    46 2     1      77.4  1.65\n 5 1778. 3126.    25    41 2     2      64.3  1.56\n 6 1778. 2337.    25    27 1     2      74.1  1.83\n 7 1778. 3007.    25    23 1     1      87.9  1.85\n 8 1778. 2796.    25    20 1     88     61.9  1.73\n 9 1778. 3866.    25    23 1     2      65.3  1.65\n10 1778. 1762.    25    28 1     1     104.   1.84\n# ℹ 110 more rows\n\n#Calculate RMSE\nrmse_lm_dose &lt;- lm_dose_pred %&gt;%\n  yardstick::rmse(truth = Y, estimate = .pred)\n\n#Calculate R-squared\nrsq_lm_dose &lt;- lm_dose_pred %&gt;% \n  yardstick::rsq(truth = Y, estimate = .pred)\n\n\nmetrics_lm_dose &lt;- tibble(\n                        Metric = c (\"rmse_lm_dose\", \"rsq_lm_dose\"),\n                        Value = c(rmse_lm_dose$.estimate, rsq_lm_dose$.estimate))\nmetrics_lm_dose\n\n# A tibble: 2 × 2\n  Metric         Value\n  &lt;chr&gt;          &lt;dbl&gt;\n1 rmse_lm_dose 666.   \n2 rsq_lm_dose    0.516\n\n\nThe RMSE is 666.46 and R-squared is approximately 0.52 for the model containing only dose as the predictor of Y.\nNext, a linear model is fitted to the continuous outcome (Y) using the all predictors with the help of the website https://www.tidymodels.org/start/models/ recommended in the class.\n\n#using linear regression function from tidymodels to regress Y on DOSE\n#The default for linear_reg() is \"lm\" for OLS\nlm_all &lt;- linear_reg() %&gt;% set_engine(\"lm\") %&gt;% fit(Y ~ ., data = data_final)\n\n#Using tidy for better format of the result table\ntidy(lm_all)\n\n# A tibble: 9 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  3387.     1835.       1.85  6.76e- 2\n2 DOSE           59.9       4.88    12.3   2.05e-22\n3 AGE             3.16      7.82     0.403 6.88e- 1\n4 SEX2         -358.      217.      -1.65  1.02e- 1\n5 RACE2         155.      129.       1.21  2.31e- 1\n6 RACE7        -405.      448.      -0.904 3.68e- 1\n7 RACE88        -53.5     245.      -0.219 8.27e- 1\n8 WT            -23.0       6.40    -3.60  4.71e- 4\n9 HT           -748.     1104.      -0.678 4.99e- 1\n\n\nThe estimates suggests, controlling for the effects of other variables, there is a positive relationship of Y with each of DOSE and AGE and a negative relation with each of WT and HT. Holding all other variables constant, Y is expected to decrease for a change in SEX variable from 1 to 2 and Y is expected to increase for a change in RACE variable from 1 to 2.\nRMSE is computed for this model with the help of ChatGPT.\n\n#First predict using the model\nlm_all_pred &lt;- predict(lm_all, new_data = data_final)%&gt;%\n  bind_cols(data_final) #adds the predicted values to the same dataframe\n\nlm_all_pred\n\n# A tibble: 120 × 8\n   .pred     Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1675. 2691.    25    42 1     2      94.3  1.77\n 2 1946. 2639.    25    24 1     2      80.4  1.76\n 3 1974. 2150.    25    31 1     1      71.8  1.81\n 4 1654. 1789.    25    46 2     1      77.4  1.65\n 5 2162. 3126.    25    41 2     2      64.3  1.56\n 6 2048. 2337.    25    27 1     2      74.1  1.83\n 7 1547. 3007.    25    23 1     1      87.9  1.85\n 8 2173. 2796.    25    20 1     88     61.9  1.73\n 9 2373. 3866.    25    23 1     2      65.3  1.65\n10 1211. 1762.    25    28 1     1     104.   1.84\n# ℹ 110 more rows\n\n#Calculate RMSE\nrmse_lm_all &lt;- lm_all_pred %&gt;%\n  yardstick::rmse(truth = Y, estimate = .pred)\n\n#Calculate R-squared\nrsq_lm_all &lt;- lm_all_pred %&gt;% \n  yardstick::rsq(truth = Y, estimate = .pred)\n\n\nmetrics_lm_all &lt;- tibble(\n                        Metric = c (\"rmse_lm_all\", \"rsq_lm_all\"),\n                        Value = c(rmse_lm_all$.estimate, rsq_lm_all$.estimate))\nmetrics_lm_all\n\n# A tibble: 2 × 2\n  Metric        Value\n  &lt;chr&gt;         &lt;dbl&gt;\n1 rmse_lm_all 591.   \n2 rsq_lm_all    0.619\n\n\nRMSE measures the average difference between the predicted values from the model and the actual values in the data. A lower RMSE value indicates a better fit to the data. Contrarily, a higher R-squared value is indicative of a model explaining a greater proportion of variance in the dependent variable. Higher R-squared values indicate a model’s stronger explanatory power. Comparing the two linear models, the second model has a lower RMSE value of 590.85 compared to 666 of the first model. The R-squared is higher at 0.62 for the second model compared to 0.52 of the first model. This indicates that the linear model containing all predictor variables outperforms the one containing only DOSE in both metrics.\nThe interpretation should be made with caution and should be contextualized within the analysis domain, the specific scales of the variables involved, and the potential for multicollinearity among predictors. For example, the scatter plot pairwise matrix suggests a high correlation between HT and WT indicating redundancy in the predictors. Adding more predictors can artificially inflate the R-square without necessarily improving the model’s predictiveness. As R-squared does not penalize for the inclusion of correlated predictors, it can lead to overestimating the model’s explanatory power.\n\n\n\nNext, logistic model is fitted for the categorical variable SEX with Dose as the predictor. ROC-AUC and Accuracy are also computed for this model.\n\n# Prepare the data: Split into training and testing sets\nset.seed(123) #for reproducibility\ndata_split &lt;- initial_split(data_final, prop = 0.80) #80% of the data set as training data\ntrain_data &lt;- training(data_split)\ntest_data &lt;- testing(data_split)\n\n# Defining the logistic regression model specification\nlogistic_spec &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  set_mode(\"classification\")\n\n# Fitting the model to the training data\nlogistic_fit_dose &lt;- logistic_spec %&gt;%\n  fit(SEX ~ DOSE, data = train_data)\ntidy(logistic_fit_dose)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  -0.532     0.916     -0.580   0.562\n2 DOSE         -0.0359    0.0265    -1.35    0.176\n\n# Predicting on the test data\npredictions_dose &lt;- predict(logistic_fit_dose, new_data = test_data, type = \"prob\")\n\n# Adding the predicted probabilities back to the test set for evaluation\ntest_data &lt;- bind_cols(test_data, predictions_dose)\ntest_data\n\n# A tibble: 24 × 9\n       Y  DOSE   AGE SEX   RACE     WT    HT .pred_1 .pred_2\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1 2691.  25      42 1     2      94.3  1.77   0.807  0.193 \n 2 2639.  25      24 1     2      80.4  1.76   0.807  0.193 \n 3 1762.  25      28 1     1     104.   1.84   0.807  0.193 \n 4 2549.  25      46 1     1      83    1.78   0.807  0.193 \n 5 2934.  37.5    46 1     1      71.2  1.67   0.867  0.133 \n 6 2749.  37.5    41 1     1      82.6  1.83   0.867  0.133 \n 7 2155.  37.5    30 1     1      85.4  1.86   0.867  0.133 \n 8 2085.  37.5    37 1     1     102.   1.81   0.867  0.133 \n 9 3004.  50      28 1     1      83.2  1.74   0.911  0.0890\n10 3514.  50      32 1     2      78.9  1.74   0.911  0.0890\n# ℹ 14 more rows\n\n# Calculating ROC AUC and Accuracy\n# SEX is a factor with levels \"1\" and \"2\", and the interest is in the level \"1\" predictions\nroc_auc_dose &lt;- roc_auc(test_data, truth = SEX, .pred_1)\n\ntest_data &lt;- test_data %&gt;%\n  mutate(predicted_class = if_else(.pred_1 &gt; 0.5, '1', '2'),\n         predicted_class = factor(predicted_class, levels = levels(SEX)))\n\n# Now calculate accuracy\naccuracy_dose &lt;- accuracy(test_data, truth = SEX, estimate = predicted_class)\n\n# Create a tibble to hold the metrics\nmetrics_table &lt;- tibble(\n  Metric = c(\"ROC AUC\", \"Accuracy\"),\n  Value = c(roc_auc_dose$.estimate, accuracy_dose$.estimate) # Extract the metric values\n)\nmetrics_table\n\n# A tibble: 2 × 2\n  Metric   Value\n  &lt;chr&gt;    &lt;dbl&gt;\n1 ROC AUC  0.5  \n2 Accuracy 0.917\n\n\nWith the assumption that R treats the first level of a factor (‘1’ in this case) as the reference category in logistic regression, the above estimate suggests a negative association of DOSE with the probability of SEX being 2.\nThe capacity of this model to distinguish between SEX levels based on DOSE is 0.5 which indicates an ability same as random guessing. The accuracy is 0.92, which suggests this model has predicted 92% of the SEX correctly.\nNext, logistic model is fitted for the categorical variable SEX using all the predictors.\n\n# Preparing the data by splitting into training and testing sets\nset.seed(123) #for reproducibility\ndata_split &lt;- initial_split(data_final, prop = 0.80)\ntrain_data &lt;- training(data_split)\ntest_data &lt;- testing(data_split)\n\n# Defining the logistic regression model specification\nlogistic_spec &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  set_mode(\"classification\")\n\n# Fitting the model to the training data\nlogistic_fit_all &lt;- logistic_spec %&gt;%\n  fit(SEX ~ Y + DOSE + AGE + RACE + WT + HT, data = train_data)\n\ntidy(logistic_fit_all)\n\n# A tibble: 9 × 5\n  term         estimate std.error statistic p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept) 125.       47.1         2.65  0.00806\n2 Y            -0.00330   0.00208    -1.59  0.113  \n3 DOSE         -0.0659    0.139      -0.473 0.636  \n4 AGE           0.268     0.130       2.06  0.0398 \n5 RACE2        -6.08      4.53       -1.34  0.179  \n6 RACE7        -2.94     18.4        -0.160 0.873  \n7 RACE88       -5.55      8.71       -0.637 0.524  \n8 WT           -0.202     0.137      -1.47  0.141  \n9 HT          -64.5      23.9        -2.70  0.00699\n\n# Predicting on the test data\npredictions &lt;- predict(logistic_fit_all, new_data = test_data, type = \"prob\")\n\n\n# Adding the predicted probabilities back to the test set for evaluation\ntest_data &lt;- bind_cols(test_data, predictions)\n\n\n# Calculating ROC AUC and Accuracy\n# SEX is a factor with levels \"1\" and \"2\", and the interest is in the level \"1\" predictions\nroc_auc_all &lt;- roc_auc(test_data, truth = SEX, .pred_1)\n\ntest_data &lt;- test_data %&gt;%\n  mutate(predicted_class = if_else(.pred_1 &gt; 0.5, '1', '2'),\n         predicted_class = factor(predicted_class, levels = levels(SEX)))\n\n# Calculating accuracy\naccuracy_all &lt;- accuracy(test_data, truth = SEX, estimate = predicted_class)\n\n# Creating a tibble to hold the metrics\nmetrics_table &lt;- tibble(\n  Metric = c(\"ROC AUC\", \"Accuracy\"),\n  Value = c(roc_auc_all$.estimate, accuracy_all$.estimate) # Extract the metric values\n)\nmetrics_table\n\n# A tibble: 2 × 2\n  Metric   Value\n  &lt;chr&gt;    &lt;dbl&gt;\n1 ROC AUC  0.955\n2 Accuracy 0.875\n\n\nWith the assumption that R treats the first level of a factor (‘1’ in this case) as the reference category in logistic regression, the above estimate suggests each of the numerical predictors, keeping other variables constant, has a negative association with the probability of SEX being 2 except for AGE. Compared to RACE1, the probability of SEX being 2 decrease for RACE2.\nThe second model has a higher ROC-AUC (0.95) compared to the first model (0.50) suggesting that the second model is comparatively better in distinguishing SEX levels. On the other hand, this model has a slightly lower accuracy (0.875) compared to the first model (0.917). Considering both these metrics, the second model containing all predictor variables is a better choice."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#mavoglurant-modeling-exercise-week-8",
    "href": "fitting-exercise/fitting-exercise.html#mavoglurant-modeling-exercise-week-8",
    "title": "fitting-exercise",
    "section": "",
    "text": "In this exercise, a model is fitted to a data set (mavoglurant_A2121_nmpk) from the R package nlmixr2data First, required packages are installed and loaded.\n\nlibrary(readxl) #for loading Excel files\n\nWarning: package 'readxl' was built under R version 4.2.3\n\nlibrary(dplyr) #for data processing/cleaning\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/Malikadhakhwa1-MADA-portfolio\n\nlibrary(ggplot2) # for plots\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\nlibrary(gtsummary)# for summary tables\n\nWarning: package 'gtsummary' was built under R version 4.2.3\n\nlibrary(patchwork) #for combine plots\n\nWarning: package 'patchwork' was built under R version 4.2.3\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.2.3\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──\n\n\n✔ broom        1.0.5     ✔ rsample      1.2.0\n✔ dials        1.2.1     ✔ tibble       3.2.1\n✔ infer        1.0.6     ✔ tune         1.1.2\n✔ modeldata    1.3.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.0.1\n✔ purrr        1.0.2     ✔ yardstick    1.3.0\n✔ recipes      1.0.9     \n\n\nWarning: package 'broom' was built under R version 4.2.3\n\n\nWarning: package 'dials' was built under R version 4.2.3\n\n\nWarning: package 'scales' was built under R version 4.2.3\n\n\nWarning: package 'infer' was built under R version 4.2.3\n\n\nWarning: package 'modeldata' was built under R version 4.2.3\n\n\nWarning: package 'parsnip' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'recipes' was built under R version 4.2.3\n\n\nWarning: package 'rsample' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tune' was built under R version 4.2.3\n\n\nWarning: package 'workflows' was built under R version 4.2.3\n\n\nWarning: package 'workflowsets' was built under R version 4.2.3\n\n\nWarning: package 'yardstick' was built under R version 4.2.3\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ recipes::all_double()  masks gtsummary::all_double()\n✖ recipes::all_factor()  masks gtsummary::all_factor()\n✖ recipes::all_integer() masks gtsummary::all_integer()\n✖ recipes::all_logical() masks gtsummary::all_logical()\n✖ recipes::all_numeric() masks gtsummary::all_numeric()\n✖ purrr::discard()       masks scales::discard()\n✖ dplyr::filter()        masks stats::filter()\n✖ dplyr::lag()           masks stats::lag()\n✖ recipes::step()        masks stats::step()\n• Search for functions across packages at https://www.tidymodels.org/find/\n\nlibrary(rsample)\nlibrary(glmnet)\n\nWarning: package 'glmnet' was built under R version 4.2.3\n\n\nLoading required package: Matrix\n\n\nWarning: package 'Matrix' was built under R version 4.2.3\n\n\n\nAttaching package: 'Matrix'\n\n\nThe following objects are masked from 'package:tidyr':\n\n    expand, pack, unpack\n\n\nLoaded glmnet 4.1-8\n\n\nSetting a random seed during analysis step\n\nrngseed = 1234\n\nData is loaded\n\n# path to data using here function\ndata_location &lt;- here::here(\"fitting-exercise\",\"Mavoglurant_A2121_nmpk.csv\")\nrawdata &lt;- read.csv(data_location)\n\nChecking the data\n\nhead(rawdata)\n\n   ID CMT EVID EVI2 MDV  DV  LNDV AMT  TIME DOSE OCC RATE AGE SEX RACE   WT\n1 793   1    1    1   1   0 0.000  25 0.000   25   1   75  42   1    2 94.3\n2 793   2    0    0   0 491 6.196   0 0.200   25   1    0  42   1    2 94.3\n3 793   2    0    0   0 605 6.405   0 0.250   25   1    0  42   1    2 94.3\n4 793   2    0    0   0 556 6.321   0 0.367   25   1    0  42   1    2 94.3\n5 793   2    0    0   0 310 5.737   0 0.533   25   1    0  42   1    2 94.3\n6 793   2    0    0   0 237 5.468   0 0.700   25   1    0  42   1    2 94.3\n        HT\n1 1.769997\n2 1.769997\n3 1.769997\n4 1.769997\n5 1.769997\n6 1.769997\n\n\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n2678\n\n\nNumber of columns\n17\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n17\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nID\n0\n1\n858.81\n34.08\n793.00\n832.00\n860.00\n888.00\n915.00\n▅▆▇▇▇\n\n\nCMT\n0\n1\n1.93\n0.26\n1.00\n2.00\n2.00\n2.00\n2.00\n▁▁▁▁▇\n\n\nEVID\n0\n1\n0.07\n0.26\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nEVI2\n0\n1\n0.16\n0.70\n0.00\n0.00\n0.00\n0.00\n4.00\n▇▁▁▁▁\n\n\nMDV\n0\n1\n0.09\n0.29\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nDV\n0\n1\n179.93\n226.28\n0.00\n23.52\n74.20\n283.00\n1730.00\n▇▂▁▁▁\n\n\nLNDV\n0\n1\n4.08\n1.88\n0.00\n3.16\n4.31\n5.64\n7.46\n▃▃▇▇▅\n\n\nAMT\n0\n1\n2.76\n10.32\n0.00\n0.00\n0.00\n0.00\n50.00\n▇▁▁▁▁\n\n\nTIME\n0\n1\n5.85\n8.91\n0.00\n0.58\n2.25\n6.36\n48.22\n▇▁▁▁▁\n\n\nDOSE\n0\n1\n37.37\n12.05\n25.00\n25.00\n37.50\n50.00\n50.00\n▇▁▁▁▇\n\n\nOCC\n0\n1\n1.38\n0.49\n1.00\n1.00\n1.00\n2.00\n2.00\n▇▁▁▁▅\n\n\nRATE\n0\n1\n16.55\n61.88\n0.00\n0.00\n0.00\n0.00\n300.00\n▇▁▁▁▁\n\n\nAGE\n0\n1\n32.90\n8.87\n18.00\n26.00\n31.00\n40.00\n50.00\n▆▇▅▅▅\n\n\nSEX\n0\n1\n1.13\n0.33\n1.00\n1.00\n1.00\n1.00\n2.00\n▇▁▁▁▁\n\n\nRACE\n0\n1\n7.41\n21.97\n1.00\n1.00\n1.00\n2.00\n88.00\n▇▁▁▁▁\n\n\nWT\n0\n1\n83.16\n12.48\n56.60\n73.30\n82.60\n90.60\n115.30\n▂▇▇▅▁\n\n\nHT\n0\n1\n1.76\n0.08\n1.52\n1.71\n1.78\n1.82\n1.93\n▁▃▆▇▃\n\n\n\n\n\nNext, three plots of DV over time stratified by the three Dose levels are created to have a visual inspection of the data. These plots are re-created by grouping the observations by ID following Dr. Handel’s codes in solution to module 8 Exercise.\n\n#exploring data  \n\np1&lt;- rawdata %&gt;% ggplot()+\n      geom_line(aes(x= TIME, y=DV, group = as.factor(ID), color= as.factor(DOSE))) +\n      facet_wrap(~DOSE, scales = \"free_y\")\np1\n\n\n\n\nThe lines are not smooth. As informed in the topic, the reason for this could be that some individuals potentially have received the drug more than once, which is indicated by having both entries with OCC=1 and OCC=2. However, in absence of information on the OCC values, the analysis looks into the data set with OCC=1 only. A subset data frame is created keeping only those observations for which OCC has a value of ‘1’\n\n#Creating a sub set of data including observations with OCC=1\ndataclean_step1 &lt;- rawdata %&gt;% \n                    dplyr::filter(OCC==1)\nskimr::skim(dataclean_step1)\n\n\nData summary\n\n\nName\ndataclean_step1\n\n\nNumber of rows\n1665\n\n\nNumber of columns\n17\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n17\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nID\n0\n1\n850.97\n36.15\n793.00\n819.00\n849.00\n882.00\n915.00\n▇▇▆▆▆\n\n\nCMT\n0\n1\n1.93\n0.26\n1.00\n2.00\n2.00\n2.00\n2.00\n▁▁▁▁▇\n\n\nEVID\n0\n1\n0.07\n0.26\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nEVI2\n0\n1\n0.07\n0.26\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nMDV\n0\n1\n0.10\n0.30\n0.00\n0.00\n0.00\n0.00\n1.00\n▇▁▁▁▁\n\n\nDV\n0\n1\n176.25\n221.34\n0.00\n20.50\n70.30\n285.00\n1550.00\n▇▂▁▁▁\n\n\nLNDV\n0\n1\n4.02\n1.92\n0.00\n3.02\n4.25\n5.65\n7.35\n▃▃▇▇▅\n\n\nAMT\n0\n1\n2.63\n9.95\n0.00\n0.00\n0.00\n0.00\n50.00\n▇▁▁▁▁\n\n\nTIME\n0\n1\n6.43\n10.03\n0.00\n0.53\n2.25\n8.20\n48.22\n▇▁▁▁▁\n\n\nDOSE\n0\n1\n36.52\n11.73\n25.00\n25.00\n37.50\n50.00\n50.00\n▇▁▂▁▇\n\n\nOCC\n0\n1\n1.00\n0.00\n1.00\n1.00\n1.00\n1.00\n1.00\n▁▁▇▁▁\n\n\nRATE\n0\n1\n15.72\n59.63\n0.00\n0.00\n0.00\n0.00\n300.00\n▇▁▁▁▁\n\n\nAGE\n0\n1\n33.11\n8.98\n18.00\n26.00\n31.00\n41.00\n50.00\n▅▇▃▅▅\n\n\nSEX\n0\n1\n1.14\n0.34\n1.00\n1.00\n1.00\n1.00\n2.00\n▇▁▁▁▁\n\n\nRACE\n0\n1\n6.98\n21.25\n1.00\n1.00\n1.00\n2.00\n88.00\n▇▁▁▁▁\n\n\nWT\n0\n1\n82.36\n12.43\n56.60\n73.10\n82.10\n90.10\n115.30\n▂▇▇▅▁\n\n\nHT\n0\n1\n1.76\n0.09\n1.52\n1.70\n1.77\n1.81\n1.93\n▁▃▆▇▃\n\n\n\n\n\nAgain, a plot of DV over time stratified by Dose is created.\n\n#p1.1&lt;- dataclean_step1 %&gt;% ggplot()+\n #     geom_line(aes(x= TIME, y=DV, group = as.factor(ID), color= as.factor(DOSE))) +\n  #    facet_wrap(~DOSE, scales = \"free_y\")\n#p1.1\n\nNext, two subsets data frame are created. In the first subset, observations wherein TIME=0 are dropped followed by computation of a variable Y which sums up the DV values for each individual based on ID. This resulted into a data frame of size 120 x 2 containing columns for ID and Y. In the second subset, only those observations are kept for which TIME=0. This second sub set has a size of 120 x 17. Finally these two data subsets are joined to create a new data frame of size 120 x 18.\n\n#Creating a subset excluding the observations with TIME=0\ndatasubset_1 &lt;- dataclean_step1 %&gt;% dplyr::filter(TIME != 0) %&gt;%\n  #Grouping by ID\n   dplyr::group_by(ID) %&gt;%\n  #Creating variable Y, which is sum of the DV variables by ID\n      dplyr::summarize(Y=sum(DV, na.rm = TRUE), .groups = \"drop\")\n\n#Creating a subset including only observations with TIME=0 \ndatasubset_2 &lt;- dataclean_step1 %&gt;% \n                    dplyr::filter(TIME==0)\n\n#Inner joining the two subsets to create a new data frame \ndata_joined &lt;- inner_join(datasubset_1, datasubset_2, by = \"ID\")\n#skimr::skim(data_joined)\n\nA final data set is created by keeping only the variables Y, DOSE, AGE, SEX, RACE, WT, HT. DOSE, SEX and RACE are coded as factors.\n\n#sub set of data_joined keeping only the required variables\ndata_final &lt;- data_joined %&gt;%\n  select(Y, DOSE, AGE, SEX, RACE, WT, HT) %&gt;%\n  #converting SEX, RACE and DOSE as factors\n  mutate(across (c(SEX, RACE), as.factor))\n\nskimr::skim(data_final)\n\n\nData summary\n\n\nName\ndata_final\n\n\nNumber of rows\n120\n\n\nNumber of columns\n7\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nSEX\n0\n1\nFALSE\n2\n1: 104, 2: 16\n\n\nRACE\n0\n1\nFALSE\n4\n1: 74, 2: 36, 88: 8, 7: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nY\n0\n1\n2445.41\n961.64\n826.43\n1700.53\n2349.14\n3050.22\n5606.58\n▆▇▆▂▁\n\n\nDOSE\n0\n1\n36.46\n11.86\n25.00\n25.00\n37.50\n50.00\n50.00\n▇▁▂▁▆\n\n\nAGE\n0\n1\n33.00\n8.98\n18.00\n26.00\n31.00\n40.25\n50.00\n▅▇▃▅▅\n\n\nWT\n0\n1\n82.55\n12.52\n56.60\n73.18\n82.10\n90.10\n115.30\n▂▇▇▅▁\n\n\nHT\n0\n1\n1.76\n0.09\n1.52\n1.70\n1.77\n1.81\n1.93\n▁▃▆▇▃\n\n\n\n\n\nThe data summary shows that SEX has 2 levels and RACE has 4 levels. The level 88 of RACE has 8 observations and 7 has 2 observations. In absence of the codebook, it is unclear the reason of naming those levels with numerical values distant from the other two names with top counts. This will be kept in the data for further analyses.\nExploratory Data Analysis\nA table is created for descriptive analysis by Dose.\n\n# Creating a table\ntable1 &lt;- tbl_summary(\n  data_final,\n  by = DOSE, # Stratify summary by DOSE\n  type = list(\n    DOSE ~ \"categorical\", #Specifying DOSE as categorical\n    SEX ~ \"categorical\",  #Specifying SES as categorical\n    RACE ~ \"categorical\", #Specifying RACE as categorical\n    Y ~ \"continuous2\",\n    AGE ~ \"continuous2\",\n    WT ~ \"continuous2\",\n    HT ~ \"continuous2\"\n  ),\n  statistic = list(\n    all_continuous() ~ c(\"{mean} ({sd})\", \"{min}, {max}\"), # Statistics for continuous variables\n    all_categorical() ~ \"{n} ({p}%)\"), # Statistics for categorical variables\n  missing = \"no\" # Option to exclude missing data in summary\n)\n\n# Display the table\ntable1\n\n\n\n\n\n  \n    \n      Characteristic\n      25, N = 591\n      37.5, N = 121\n      50, N = 491\n    \n  \n  \n    Y\n\n\n\n        Mean (SD)\n1,783 (601)\n2,464 (488)\n3,239 (787)\n        Range\n826, 3,866\n1,801, 3,463\n1,949, 5,607\n    AGE\n\n\n\n        Mean (SD)\n32 (9)\n36 (10)\n33 (9)\n        Range\n18, 49\n19, 50\n18, 49\n    SEX\n\n\n\n        1\n49 (83%)\n10 (83%)\n45 (92%)\n        2\n10 (17%)\n2 (17%)\n4 (8.2%)\n    RACE\n\n\n\n        1\n32 (54%)\n10 (83%)\n32 (65%)\n        2\n21 (36%)\n2 (17%)\n13 (27%)\n        7\n1 (1.7%)\n0 (0%)\n1 (2.0%)\n        88\n5 (8.5%)\n0 (0%)\n3 (6.1%)\n    WT\n\n\n\n        Mean (SD)\n81 (12)\n81 (11)\n84 (13)\n        Range\n58, 111\n64, 102\n57, 115\n    HT\n\n\n\n        Mean (SD)\n1.76 (0.09)\n1.75 (0.10)\n1.76 (0.08)\n        Range\n1.56, 1.91\n1.56, 1.91\n1.52, 1.93\n  \n  \n  \n    \n      1 n (%)\n    \n  \n\n\n\n\nA visual inspection of distribution of continuous variables is performed by plotting histograms.\n\n# Plotting histograms for all continuous variables in a grid\n\nplot1 &lt;-\n  data_final %&gt;%\n  select(Y, AGE, WT, HT) %&gt;%\n  pivot_longer(everything()) %&gt;%\n  mutate(name = factor(name, levels = c(\"Y\", \"AGE\", \"WT\", \"HT\"))) %&gt;%  #Keeps the order of plot\n  ggplot(aes(x = value, fill = name)) +\n  geom_histogram(alpha = 0.5, color=\"black\") +\n  facet_wrap(~name, scales = \"free\") +\n  scale_fill_manual(values = c(\"Y\" = \"lightgreen\", \"AGE\" = \"dodgerblue\", \"WT\" = \"grey\", \"HT\" = \"salmon\")) +\n  theme_minimal()\nplot1\n\n\n\n#Saving the figure in the folder\nplot1_file &lt;- here(\"fitting-exercise\", \"hist_plots.png\")\nggsave(filename = plot1_file, plot=plot1, bg=\"white\")\n\nBar charts are plotted for visual inspection of distribution of factor variables. The bar chart indicates smaller representation of Dose 37.5, Sex level of 2 and Races 7 and 88 in the data.\n\n#creating a combined plot for DOSE, SEX and RACE. For this plot DOSE is treated as a factor as it has only 3 levels.\nplot2 &lt;- \n  data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Convert DOSE to factor here\n  select(DOSE, SEX, RACE) %&gt;%\n  pivot_longer(everything(), names_to = \"name\", values_to = \"value\") %&gt;%\n  mutate(name = factor(name, levels = c(\"DOSE\", \"SEX\", \"RACE\"))) %&gt;%\n  ggplot(aes(x = value, fill = name)) +\n  geom_bar(alpha = 0.5, color = \"black\") +\n  facet_wrap(~name, scales = \"free\") +\n  scale_fill_manual(values = c(\"DOSE\" = \"lightgreen\", \"SEX\" = \"salmon\", \"RACE\" = \"skyblue\"))\nplot2\n\n\n\n#Saving the figure in the folder\nplot2_file &lt;- here(\"fitting-exercise\", \"factor_vars_plots.png\")\nggsave(filename = plot2_file, plot=plot2, bg=\"white\")\n\nSaving 7 x 5 in image\n\n\nBox plot for distribution of Y by Dose is created.The box plot suggests outlier values of Y for doses 25 and 50.\n\nplot3 &lt;- data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Converting DOSE to factor only for the plot\n  ggplot(aes(x = DOSE, y = Y, fill = DOSE)) + \n  geom_boxplot() + \n  labs(title = \"Distribution of Y by DOSE\", x = \"DOSE\", y = \"Y\") +\n  theme_minimal()\n\nplot3\n\n\n\n#Saving the figure in the folder\nplot3_file &lt;- here(\"fitting-exercise\", \"Y_Dose.png\")\nggsave(filename = plot3_file, plot=plot3, bg=\"white\")\n\nSaving 7 x 5 in image\n\n\nNext, Scatter plot is created for Y by Age stratified by Dose. For doses 37.5 and 50, the plot indicates a linear increase in Y as Age increases. For the dose of 25, such relationship is negative.\n\nplot4 &lt;- data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Convert DOSE to factor here\n  ggplot(aes(x = AGE, y = Y, group = DOSE, col = DOSE)) +\n  geom_point() + \n  geom_smooth(method = lm, se = FALSE) + # Add a linear regression line\n  scale_color_viridis_d(option = \"plasma\", end = .7)+\n  labs(title = \"Scatterplot of Y vs. AGE\", x = \"Age\", y = \"Total Drug (Y)\") +\n  theme_minimal()\n\nplot4\n\n\n\n#Saving the figure in the folder\nplot4_file &lt;- here(\"fitting-exercise\", \"Y_Age_Dose.png\")\nggsave(filename = plot4_file, plot=plot4, bg=\"white\")\n\nScatter plot is created for Y by HT stratified by Dose. For all the doses the plot indicates a decline in Y as HT increases.\n\nplot5 &lt;- data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Convert DOSE to factor here\n  ggplot(aes(x = HT, y = Y, group = DOSE, col = DOSE)) +\n  geom_point() + \n  geom_smooth(method = lm, se = FALSE) + # Add a linear regression line\n  scale_color_viridis_d(option = \"plasma\", end = .7)+\n  labs(title = \"Scatterplot of Y vs. HT\", x = \"HT\", y = \"Total Drug (Y)\") +\n  theme_minimal()\n\nplot5\n\n\n\n#Saving the figure in the folder\nplot5_file &lt;- here(\"fitting-exercise\", \"Y_HT_Dose.png\")\nggsave(filename = plot5_file, plot=plot5, bg=\"white\")\n\nScatter plot is created for Y by WT stratified by Dose. As with Y and HT, a decline in Y is observed as WT decreased for all levels of Dose.\n\nplot6&lt;-data_final %&gt;%\n  mutate(DOSE = as.factor(DOSE)) %&gt;% # Convert DOSE to factor here\n  ggplot(aes(x = WT, y = Y, group = DOSE, col = DOSE)) +\n  geom_point() + \n  geom_smooth(method = lm, se = FALSE) + # Add a linear regression line\n  scale_color_viridis_d(option = \"plasma\", end = .7)+\n  labs(title = \"Scatterplot of Y vs. WT\", x = \"WT\", y = \"Total Drug (Y)\") +\n  theme_minimal()\n\nplot6\n\n\n\n#Saving the figure in the folder\nplot6_file &lt;- here(\"fitting-exercise\", \"Y_WT_Dose.png\")\nggsave(filename = plot6_file, plot=plot6, bg=\"white\")\n\nVisual inspection of correlation between the continuous variables is performed. The scatterplot matrix indicates a linear correlation between WT and HT.\n\n# Using the pairs function for selected variables\nplot7 &lt;- pairs(data_final[, c(\"Y\", \"AGE\", \"WT\", \"HT\")], \n      main = \"Pairwise Scatterplot Matrix\")\n\n\n\nplot7\n\nNULL\n\n#Saving the figure in the folder\nplot7_file &lt;- here(\"fitting-exercise\", \"Pair_matrix.png\")\nggsave(filename = plot7_file, plot=plot6, bg=\"white\")\n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nA linear model is fitted to the continuous outcome (Y) using the main predictor of interest DOSE with the help of the recommended website https://www.tidymodels.org/start/models/.\n\n#using linear regression function from tidymodels to regress Y on DOSE\n#The default for linear_reg() is \"lm\" for OLS\nlm_dose &lt;- linear_reg() %&gt;% set_engine(\"lm\") %&gt;% fit(Y ~ DOSE, data = data_final)\n#Using tidy for better format of the result table\ntidy(lm_dose)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    323.     199.        1.62 1.07e- 1\n2 DOSE            58.2      5.19     11.2  2.69e-20\n\n\nThe estimates suggests a positive relationship between the Y and DOSE indicating a unit increase in DOSE increases Y by 58.21 units.\nRMSE is computed for this model with the help of ChatGPT.\n\n#First predict using the model\nlm_dose_pred &lt;- predict(lm_dose, new_data = data_final)%&gt;%\n  bind_cols(data_final) #adds the predicted values to the same dataframe\n\nlm_dose_pred\n\n# A tibble: 120 × 8\n   .pred     Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1778. 2691.    25    42 1     2      94.3  1.77\n 2 1778. 2639.    25    24 1     2      80.4  1.76\n 3 1778. 2150.    25    31 1     1      71.8  1.81\n 4 1778. 1789.    25    46 2     1      77.4  1.65\n 5 1778. 3126.    25    41 2     2      64.3  1.56\n 6 1778. 2337.    25    27 1     2      74.1  1.83\n 7 1778. 3007.    25    23 1     1      87.9  1.85\n 8 1778. 2796.    25    20 1     88     61.9  1.73\n 9 1778. 3866.    25    23 1     2      65.3  1.65\n10 1778. 1762.    25    28 1     1     104.   1.84\n# ℹ 110 more rows\n\n#Calculate RMSE\nrmse_lm_dose &lt;- lm_dose_pred %&gt;%\n  yardstick::rmse(truth = Y, estimate = .pred)\n\n#Calculate R-squared\nrsq_lm_dose &lt;- lm_dose_pred %&gt;% \n  yardstick::rsq(truth = Y, estimate = .pred)\n\n\nmetrics_lm_dose &lt;- tibble(\n                        Metric = c (\"rmse_lm_dose\", \"rsq_lm_dose\"),\n                        Value = c(rmse_lm_dose$.estimate, rsq_lm_dose$.estimate))\nmetrics_lm_dose\n\n# A tibble: 2 × 2\n  Metric         Value\n  &lt;chr&gt;          &lt;dbl&gt;\n1 rmse_lm_dose 666.   \n2 rsq_lm_dose    0.516\n\n\nThe RMSE is 666.46 and R-squared is approximately 0.52 for the model containing only dose as the predictor of Y.\nNext, a linear model is fitted to the continuous outcome (Y) using the all predictors with the help of the website https://www.tidymodels.org/start/models/ recommended in the class.\n\n#using linear regression function from tidymodels to regress Y on DOSE\n#The default for linear_reg() is \"lm\" for OLS\nlm_all &lt;- linear_reg() %&gt;% set_engine(\"lm\") %&gt;% fit(Y ~ ., data = data_final)\n\n#Using tidy for better format of the result table\ntidy(lm_all)\n\n# A tibble: 9 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  3387.     1835.       1.85  6.76e- 2\n2 DOSE           59.9       4.88    12.3   2.05e-22\n3 AGE             3.16      7.82     0.403 6.88e- 1\n4 SEX2         -358.      217.      -1.65  1.02e- 1\n5 RACE2         155.      129.       1.21  2.31e- 1\n6 RACE7        -405.      448.      -0.904 3.68e- 1\n7 RACE88        -53.5     245.      -0.219 8.27e- 1\n8 WT            -23.0       6.40    -3.60  4.71e- 4\n9 HT           -748.     1104.      -0.678 4.99e- 1\n\n\nThe estimates suggests, controlling for the effects of other variables, there is a positive relationship of Y with each of DOSE and AGE and a negative relation with each of WT and HT. Holding all other variables constant, Y is expected to decrease for a change in SEX variable from 1 to 2 and Y is expected to increase for a change in RACE variable from 1 to 2.\nRMSE is computed for this model with the help of ChatGPT.\n\n#First predict using the model\nlm_all_pred &lt;- predict(lm_all, new_data = data_final)%&gt;%\n  bind_cols(data_final) #adds the predicted values to the same dataframe\n\nlm_all_pred\n\n# A tibble: 120 × 8\n   .pred     Y  DOSE   AGE SEX   RACE     WT    HT\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 1675. 2691.    25    42 1     2      94.3  1.77\n 2 1946. 2639.    25    24 1     2      80.4  1.76\n 3 1974. 2150.    25    31 1     1      71.8  1.81\n 4 1654. 1789.    25    46 2     1      77.4  1.65\n 5 2162. 3126.    25    41 2     2      64.3  1.56\n 6 2048. 2337.    25    27 1     2      74.1  1.83\n 7 1547. 3007.    25    23 1     1      87.9  1.85\n 8 2173. 2796.    25    20 1     88     61.9  1.73\n 9 2373. 3866.    25    23 1     2      65.3  1.65\n10 1211. 1762.    25    28 1     1     104.   1.84\n# ℹ 110 more rows\n\n#Calculate RMSE\nrmse_lm_all &lt;- lm_all_pred %&gt;%\n  yardstick::rmse(truth = Y, estimate = .pred)\n\n#Calculate R-squared\nrsq_lm_all &lt;- lm_all_pred %&gt;% \n  yardstick::rsq(truth = Y, estimate = .pred)\n\n\nmetrics_lm_all &lt;- tibble(\n                        Metric = c (\"rmse_lm_all\", \"rsq_lm_all\"),\n                        Value = c(rmse_lm_all$.estimate, rsq_lm_all$.estimate))\nmetrics_lm_all\n\n# A tibble: 2 × 2\n  Metric        Value\n  &lt;chr&gt;         &lt;dbl&gt;\n1 rmse_lm_all 591.   \n2 rsq_lm_all    0.619\n\n\nRMSE measures the average difference between the predicted values from the model and the actual values in the data. A lower RMSE value indicates a better fit to the data. Contrarily, a higher R-squared value is indicative of a model explaining a greater proportion of variance in the dependent variable. Higher R-squared values indicate a model’s stronger explanatory power. Comparing the two linear models, the second model has a lower RMSE value of 590.85 compared to 666 of the first model. The R-squared is higher at 0.62 for the second model compared to 0.52 of the first model. This indicates that the linear model containing all predictor variables outperforms the one containing only DOSE in both metrics.\nThe interpretation should be made with caution and should be contextualized within the analysis domain, the specific scales of the variables involved, and the potential for multicollinearity among predictors. For example, the scatter plot pairwise matrix suggests a high correlation between HT and WT indicating redundancy in the predictors. Adding more predictors can artificially inflate the R-square without necessarily improving the model’s predictiveness. As R-squared does not penalize for the inclusion of correlated predictors, it can lead to overestimating the model’s explanatory power.\n\n\n\nNext, logistic model is fitted for the categorical variable SEX with Dose as the predictor. ROC-AUC and Accuracy are also computed for this model.\n\n# Prepare the data: Split into training and testing sets\nset.seed(123) #for reproducibility\ndata_split &lt;- initial_split(data_final, prop = 0.80) #80% of the data set as training data\ntrain_data &lt;- training(data_split)\ntest_data &lt;- testing(data_split)\n\n# Defining the logistic regression model specification\nlogistic_spec &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  set_mode(\"classification\")\n\n# Fitting the model to the training data\nlogistic_fit_dose &lt;- logistic_spec %&gt;%\n  fit(SEX ~ DOSE, data = train_data)\ntidy(logistic_fit_dose)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)  -0.532     0.916     -0.580   0.562\n2 DOSE         -0.0359    0.0265    -1.35    0.176\n\n# Predicting on the test data\npredictions_dose &lt;- predict(logistic_fit_dose, new_data = test_data, type = \"prob\")\n\n# Adding the predicted probabilities back to the test set for evaluation\ntest_data &lt;- bind_cols(test_data, predictions_dose)\ntest_data\n\n# A tibble: 24 × 9\n       Y  DOSE   AGE SEX   RACE     WT    HT .pred_1 .pred_2\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n 1 2691.  25      42 1     2      94.3  1.77   0.807  0.193 \n 2 2639.  25      24 1     2      80.4  1.76   0.807  0.193 \n 3 1762.  25      28 1     1     104.   1.84   0.807  0.193 \n 4 2549.  25      46 1     1      83    1.78   0.807  0.193 \n 5 2934.  37.5    46 1     1      71.2  1.67   0.867  0.133 \n 6 2749.  37.5    41 1     1      82.6  1.83   0.867  0.133 \n 7 2155.  37.5    30 1     1      85.4  1.86   0.867  0.133 \n 8 2085.  37.5    37 1     1     102.   1.81   0.867  0.133 \n 9 3004.  50      28 1     1      83.2  1.74   0.911  0.0890\n10 3514.  50      32 1     2      78.9  1.74   0.911  0.0890\n# ℹ 14 more rows\n\n# Calculating ROC AUC and Accuracy\n# SEX is a factor with levels \"1\" and \"2\", and the interest is in the level \"1\" predictions\nroc_auc_dose &lt;- roc_auc(test_data, truth = SEX, .pred_1)\n\ntest_data &lt;- test_data %&gt;%\n  mutate(predicted_class = if_else(.pred_1 &gt; 0.5, '1', '2'),\n         predicted_class = factor(predicted_class, levels = levels(SEX)))\n\n# Now calculate accuracy\naccuracy_dose &lt;- accuracy(test_data, truth = SEX, estimate = predicted_class)\n\n# Create a tibble to hold the metrics\nmetrics_table &lt;- tibble(\n  Metric = c(\"ROC AUC\", \"Accuracy\"),\n  Value = c(roc_auc_dose$.estimate, accuracy_dose$.estimate) # Extract the metric values\n)\nmetrics_table\n\n# A tibble: 2 × 2\n  Metric   Value\n  &lt;chr&gt;    &lt;dbl&gt;\n1 ROC AUC  0.5  \n2 Accuracy 0.917\n\n\nWith the assumption that R treats the first level of a factor (‘1’ in this case) as the reference category in logistic regression, the above estimate suggests a negative association of DOSE with the probability of SEX being 2.\nThe capacity of this model to distinguish between SEX levels based on DOSE is 0.5 which indicates an ability same as random guessing. The accuracy is 0.92, which suggests this model has predicted 92% of the SEX correctly.\nNext, logistic model is fitted for the categorical variable SEX using all the predictors.\n\n# Preparing the data by splitting into training and testing sets\nset.seed(123) #for reproducibility\ndata_split &lt;- initial_split(data_final, prop = 0.80)\ntrain_data &lt;- training(data_split)\ntest_data &lt;- testing(data_split)\n\n# Defining the logistic regression model specification\nlogistic_spec &lt;- logistic_reg() %&gt;%\n  set_engine(\"glm\") %&gt;%\n  set_mode(\"classification\")\n\n# Fitting the model to the training data\nlogistic_fit_all &lt;- logistic_spec %&gt;%\n  fit(SEX ~ Y + DOSE + AGE + RACE + WT + HT, data = train_data)\n\ntidy(logistic_fit_all)\n\n# A tibble: 9 × 5\n  term         estimate std.error statistic p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept) 125.       47.1         2.65  0.00806\n2 Y            -0.00330   0.00208    -1.59  0.113  \n3 DOSE         -0.0659    0.139      -0.473 0.636  \n4 AGE           0.268     0.130       2.06  0.0398 \n5 RACE2        -6.08      4.53       -1.34  0.179  \n6 RACE7        -2.94     18.4        -0.160 0.873  \n7 RACE88       -5.55      8.71       -0.637 0.524  \n8 WT           -0.202     0.137      -1.47  0.141  \n9 HT          -64.5      23.9        -2.70  0.00699\n\n# Predicting on the test data\npredictions &lt;- predict(logistic_fit_all, new_data = test_data, type = \"prob\")\n\n\n# Adding the predicted probabilities back to the test set for evaluation\ntest_data &lt;- bind_cols(test_data, predictions)\n\n\n# Calculating ROC AUC and Accuracy\n# SEX is a factor with levels \"1\" and \"2\", and the interest is in the level \"1\" predictions\nroc_auc_all &lt;- roc_auc(test_data, truth = SEX, .pred_1)\n\ntest_data &lt;- test_data %&gt;%\n  mutate(predicted_class = if_else(.pred_1 &gt; 0.5, '1', '2'),\n         predicted_class = factor(predicted_class, levels = levels(SEX)))\n\n# Calculating accuracy\naccuracy_all &lt;- accuracy(test_data, truth = SEX, estimate = predicted_class)\n\n# Creating a tibble to hold the metrics\nmetrics_table &lt;- tibble(\n  Metric = c(\"ROC AUC\", \"Accuracy\"),\n  Value = c(roc_auc_all$.estimate, accuracy_all$.estimate) # Extract the metric values\n)\nmetrics_table\n\n# A tibble: 2 × 2\n  Metric   Value\n  &lt;chr&gt;    &lt;dbl&gt;\n1 ROC AUC  0.955\n2 Accuracy 0.875\n\n\nWith the assumption that R treats the first level of a factor (‘1’ in this case) as the reference category in logistic regression, the above estimate suggests each of the numerical predictors, keeping other variables constant, has a negative association with the probability of SEX being 2 except for AGE. Compared to RACE1, the probability of SEX being 2 decrease for RACE2.\nThe second model has a higher ROC-AUC (0.95) compared to the first model (0.50) suggesting that the second model is comparatively better in distinguishing SEX levels. On the other hand, this model has a slightly lower accuracy (0.875) compared to the first model (0.917). Considering both these metrics, the second model containing all predictor variables is a better choice."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#fitting-exercise-continuation-week-10",
    "href": "fitting-exercise/fitting-exercise.html#fitting-exercise-continuation-week-10",
    "title": "fitting-exercise",
    "section": "Fitting-exercise continuation (Week 10)",
    "text": "Fitting-exercise continuation (Week 10)\nThis is extension of exercise 8 using advanced linear modelling techniques.\nA final data set is created by keeping only the variables Y, DOSE, AGE, SEX, WT and HT. SEX is coded as factor. RACE is not included in the data. The original summary shows that RACE has 4 levels. The level 88 of RACE has 8 observations and 7 has 2 observations. In absence of the codebook, it is unclear the reason of naming those levels with numerical values distant from the other two names with top counts.\n\n#Dropping Race from the data\n\ndata_final_new &lt;- subset(data_final, select = -RACE)\n\nThe data is randomly splitted into 75% train and 25% test sets following the Data Splitting sectoin of the get Started tidymodels tutorial.Linear model is fitted on the training data. In later part of the exercise the model performance will be measured by applying it on the testing data.\n\n#setting the random seed for reproducibility\nset.seed(rngseed)\n\n#Assigning 75% of the data into the training set\ndata_split &lt;- initial_split(data_final_new, prop = .75)\n\n#Creating data frames for the train and test data\ntrain_data &lt;- training(data_split)\ntest_data &lt;- testing(data_split)\n\n#checking the data structure\nstr(train_data)\n\ntibble [90 × 6] (S3: tbl_df/tbl/data.frame)\n $ Y   : num [1:90] 3004 1347 2772 2028 2353 ...\n $ DOSE: num [1:90] 50 25 37.5 25 50 25 25 25 25 37.5 ...\n $ AGE : int [1:90] 28 41 28 28 37 30 23 41 48 26 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 1 1 2 1 1 1 2 2 1 ...\n $ WT  : num [1:90] 83.2 81 78.3 58.9 99.1 ...\n $ HT  : num [1:90] 1.74 1.75 1.72 1.58 1.78 ...\n\nstr(test_data)\n\ntibble [30 × 6] (S3: tbl_df/tbl/data.frame)\n $ Y   : num [1:30] 2549 2353 2009 2934 2085 ...\n $ DOSE: num [1:30] 25 37.5 37.5 37.5 37.5 50 50 50 50 25 ...\n $ AGE : int [1:30] 46 43 19 46 37 42 32 47 45 20 ...\n $ SEX : Factor w/ 2 levels \"1\",\"2\": 1 2 1 1 1 2 1 1 1 1 ...\n $ WT  : num [1:30] 83 64.4 86.1 71.2 102.1 ...\n $ HT  : num [1:30] 1.78 1.56 1.91 1.67 1.81 ...\n\n\n\nModel performance assessment 1\nTwo linear models are fitted to the continuous outcome (Y) of the train data, first using only the main predictor of interest DOSE and second using all predictors. A null model is also fitted.\n\n#For reproducibility\nset.seed(rngseed)\n\n#Using linear regression function from tidymodels. The default for linear_reg() is \"lm\" for OLS\nlin_mod &lt;- linear_reg() %&gt;% set_engine(\"lm\") \n\n#fitting Y on Dose\nlinfit_dose1 &lt;- lin_mod%&gt;%fit(Y ~ DOSE, data = train_data)\n\n#Fitting Y on all other variables in the data\nlinfit_all1 &lt;- lin_mod%&gt;%fit(Y~., data=train_data)\n\n# Fitting a null model using tidymodels' parsnip engine\nnull_mod &lt;- null_model() %&gt;% set_engine(\"parsnip\") %&gt;% set_mode(\"regression\")\nlinfit_null1 &lt;- null_mod %&gt;%\n  fit(Y ~ 1, data = train_data)\n\n#Using tidy for better format of the result table\ntidy(linfit_dose1)\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    535.     244.        2.19 3.08e- 2\n2 DOSE            53.4      6.29      8.50 4.41e-13\n\ntidy(linfit_all1)\n\n# A tibble: 6 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)  4397.      2170.      2.03   4.59e- 2\n2 DOSE           55.3        5.83    9.49   6.09e-15\n3 AGE            -0.417      9.50   -0.0439 9.65e- 1\n4 SEX2         -569.       285.     -1.99   4.95e- 2\n5 WT            -22.6        7.65   -2.96   4.00e- 3\n6 HT          -1130.      1358.     -0.832  4.08e- 1\n\ntidy(linfit_null1)\n\n# A tibble: 1 × 1\n  value\n  &lt;dbl&gt;\n1 2509.\n\n\nThe results of both the first and second models suggest a positive relationship between the Y and DOSE. The second model suggests that controlling for the effects of other variables, there is a positive relationship of Y with AGE and a negative relation with each of WT and HT. Holding all other variables constant, Y is expected to decrease for a change in SEX variable from 1 to 2.\nNext, RMSE metrics are computed for all the models following Dr. Handel’s codes for solutions to module 8 exercise.\n\n#Computing the RMSE for model 1\nmetrics_dose1 &lt;- linfit_dose1 %&gt;%\n  predict(train_data) %&gt;%\n  bind_cols(train_data)%&gt;%\n  metrics(truth=Y, estimate=.pred)\n\n#Computing the RMSE for model 2\nmetrics_all1 &lt;- linfit_all1 %&gt;%\n  predict(train_data) %&gt;%\n  bind_cols(train_data)%&gt;%\n  metrics(truth=Y, estimate=.pred)\n\n#Computing the RMSE for model 3\nmetrics_null1 &lt;- linfit_null1 %&gt;%\n  predict(train_data) %&gt;%\n  bind_cols(train_data)%&gt;%\n  metrics(truth=Y, estimate=.pred)\n\n\n#print the results\nprint(metrics_null1)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard        948.\n2 rsq     standard         NA \n3 mae     standard        765.\n\nprint(metrics_dose1)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     703.   \n2 rsq     standard       0.451\n3 mae     standard     546.   \n\nprint(metrics_all1)\n\n# A tibble: 3 × 3\n  .metric .estimator .estimate\n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt;\n1 rmse    standard     627.   \n2 rsq     standard       0.562\n3 mae     standard     486.   \n\n\nThe RMSEs are 948, 702 and 627 for the null model, model with only DOSE and model with all the predictors respectively. RMSE measures the average difference between the predicted values from the model and the actual values in the data. A lower RMSE value indicates a better fit to the data. Thus, the linear model containing all predictor variables outperforms the other two models according to the RMSE metrics.\n\n\nModel performance assessment 2\nThe model performance is computed using cross-validation technique with 10-folds for the two models. This CV technique subsamples the training data 10 times and fits each of the models to the data, wherein 90% of the data is used to fit the model, and 10% to evaluate the model.\n\n#setting the random seed for reproducibility\nset.seed(rngseed)\n\nfolds &lt;-vfold_cv(train_data, v=10)\nfolds\n\n#  10-fold cross-validation \n# A tibble: 10 × 2\n   splits         id    \n   &lt;list&gt;         &lt;chr&gt; \n 1 &lt;split [81/9]&gt; Fold01\n 2 &lt;split [81/9]&gt; Fold02\n 3 &lt;split [81/9]&gt; Fold03\n 4 &lt;split [81/9]&gt; Fold04\n 5 &lt;split [81/9]&gt; Fold05\n 6 &lt;split [81/9]&gt; Fold06\n 7 &lt;split [81/9]&gt; Fold07\n 8 &lt;split [81/9]&gt; Fold08\n 9 &lt;split [81/9]&gt; Fold09\n10 &lt;split [81/9]&gt; Fold10\n\n\nIn the following steps, an object is built for resampling using ‘workflow’ function of tidymodels. The ‘workflow’ function bundles together the pre-processing, modeling, and post-processing requests.\n\n#setting the random seed for reproducibility\nset.seed(rngseed)\n#Resampling using workflow for the model with only DOSE as predictor\nlinfit_dose2 &lt;- \n    workflow() %&gt;%\n    add_model(lin_mod) %&gt;%\n  add_formula(Y ~ DOSE)%&gt;%\n    fit_resamples(folds)\n\n#Resampling using workflowfor for the model with all predictors\nlinfit_all2 &lt;- \n    workflow() %&gt;%\n    add_model(lin_mod) %&gt;%\n  add_formula(Y ~ .)%&gt;%\n    fit_resamples(folds)\n\n#extracting the performance statistics results created from the 10 assessment sets. \n\ncollect_metrics(linfit_dose2)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   691.       10 67.5    Preprocessor1_Model1\n2 rsq     standard     0.512    10  0.0592 Preprocessor1_Model1\n\ncollect_metrics(linfit_all2)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   646.       10 64.8    Preprocessor1_Model1\n2 rsq     standard     0.573    10  0.0686 Preprocessor1_Model1\n\n\nThe application of 10-fold CV led to an improvement in the RMSE of the model including only DOSE, reducing it to 690 from 702, which was observed when the training data was utilized without CV. Conversely, the RMSE of the model including all the predictors experienced an increase to 645 with 10-fold CV, compared to 627 without CV.\nUnlike the train/test model without CV, the 10-fold CV calculates 10 separate RMSE values for each sample and averages these values. This process introduces some variability among the generated RMSEs. Analysis revealed that the full model exhibits a smaller standard error of 64.81 for RMSE compared to 67.49 of the model that includes only the DOSE predictor.\nFinally, the 10-fold CV modelling is performed again to check how different the metric is when using a different seed for randomization.\n\n#setting a different random seed\nset.seed(222)\n\n#Assigning 75% of the data into the training set\ndata_split_new &lt;- initial_split(data_final, prop = .75)\n\n#Creating data frames for the train and test data\ntrain_data_new &lt;- training(data_split_new)\ntest_data_new &lt;- testing(data_split_new)\n\nPreparing the data for 10-fold cross-validation.\n\n#setting a different random seed\nset.seed(222)\n\n#Creating 10 random samples of the newly generated training data\nfolds_new &lt;-vfold_cv(train_data_new, v=10)\n\nUsing the workflow to compute both the models.\n\n#setting the random seed for reproducibility\nset.seed(222)\n\n#Resampling using workflow for the model with only DOSE as predictor\nlinfit_dose2_new &lt;- \n    workflow() %&gt;%\n    add_model(lin_mod) %&gt;%\n  add_formula(Y ~ DOSE)%&gt;%\n    fit_resamples(folds_new)\n\n#Resampling using workflowfor for the model with all predictors\nlinfit_all2_new &lt;- \n    workflow() %&gt;%\n    add_model(lin_mod) %&gt;%\n  add_formula(Y ~ .)%&gt;%\n    fit_resamples(folds_new)\n\n→ A | warning: prediction from a rank-deficient fit may be misleading\n\n\nThere were issues with some computations   A: x1\n\n\nThere were issues with some computations   A: x10\n\n\n\n\n#extracting the performance statistics results created from the 10 assessment sets. \n\ncollect_metrics(linfit_dose2_new)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   665.       10 67.9    Preprocessor1_Model1\n2 rsq     standard     0.553    10  0.0608 Preprocessor1_Model1\n\ncollect_metrics(linfit_all2_new)\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   647.       10 66.7    Preprocessor1_Model1\n2 rsq     standard     0.593    10  0.0690 Preprocessor1_Model1\n\n\nWhen a new seed is applied, further reduction is noted in the mean RMSE for the model that included only DOSE as predictor, with value dropping to 665 from the previous seed result of 691.The Standard Error remained relatively unchanged from the previous figure. For the full model, the mean RMSE slightly increased to 647 with the new seed from 646 with the the previous seed. In both cases, the RMSE of the full model remained higher than that of the full model using the training data without CV.\nIn summary, the model that included only DOSE, when subjected to 10-fold CV, showed an optimized RMSE compared to the models fitted on the training data without CV. On the other hand, for the full model, a better RMSE is observed when the model is fitted on the training data without CV."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-predictions",
    "href": "fitting-exercise/fitting-exercise.html#model-predictions",
    "title": "fitting-exercise",
    "section": "Model Predictions",
    "text": "Model Predictions\nI create 3 data frames that combine the observed and predicted values from the 3 original model fits to all of the training data. I also create labels for each model.\n\n# Creating a data-frame with observed and predicted values from the model with `DOSE` as the predictor\nfitted_dose &lt;- linfit_dose1 %&gt;%\n  predict(train_data) %&gt;%\n  bind_cols(train_data)\n\n# Creating a data-frame with observed and predicted values from the model with everything as the predictor\nfitted_all &lt;- linfit_all1 %&gt;%\n  predict(train_data) %&gt;%\n  bind_cols(train_data)\n\n# Creating a data-frame with observed and predicted values from the model\nfitted_null &lt;- linfit_null1 %&gt;%\n  predict(train_data) %&gt;%\n  bind_cols(train_data)\n\n# The dose data frame is Model 1\nfitted_dose$label &lt;- rep(\"Model 1\")\n\n#The all data frame is Model 2\nfitted_all$label &lt;- rep(\"Model 2\")\n\n#The null data frame is Null Model\nfitted_null$label &lt;- rep(\"Null Model\")\n\n#Combined data frame\nfits_combined &lt;- rbind(fitted_dose, fitted_all, fitted_null)\n\nThe plots differentiate each of the models by the label with color and shape for the data points. The graph plots the observed value vs the predicted value.\nWhen observing the graphs we created in plots 1 and plots 2, it becomes obvious that the model with all of the predictors show the greatest predictions. The Dose model and the Null model both show straight lines, which is easily explained by the properties of a null model.\n\n# Create the ggplot figure to graph the predictive values vs the observed value for the three models\nplot1 &lt;- ggplot(\n  fits_combined, aes(x = Y, y = .pred, color = label, shape = label)) +\n  geom_point(size=2) +\n   scale_color_manual(values = c(\"black\", \"orange\", \"red\"))+\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\") +  # Adding a 45-degree line\n  labs(x = \"Observed Values\", y = \"Predicted Values\", color = \"Model\", shape = \"Model\") +\n  xlim(0, 5000) + \n  ylim(0, 5000)+\n  theme_bw()\n\n\nplot1\n\n\n\n\nModel 2 follows the 45 degree angle line most closest compared to the other two models.\n\n# Create the same ggplot figure with facets\nplot2 &lt;- ggplot(\n  fits_combined, aes(x = Y, y = .pred, color = label)) +\n  geom_point() +\n  scale_color_manual(values = c(\"black\", \"orange\", \"red\"))+\n  geom_abline(intercept = 0, slope = 1, linetype = \"dashed\") +  # Adding a 45-degree line\n  labs(x = \"Observed Values\", y = \"Predicted Values\", color = \"Model\", shape = \"Model\") +\n  theme_minimal() +\n  facet_wrap(~ label, scales = \"free\")+ \n  xlim(0, 5000) + ylim(0, 5000)\n\nplot2\n\n\n\n\nThe plot clearly shows a greater number of negative values compared to positive values, showing that there may be other factors still playing a role in affecting the data.\n\nfitted_all &lt;- fitted_all %&gt;%\n  mutate(residuals = .pred - Y)\n\nplot3 &lt;- ggplot(fitted_all, aes(x = .pred, y = residuals)) +\n  geom_point(size = 2, color = \"purple\") +\n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"black\") +  \n  labs(x = \"Predicted Values\", y = \"Residuals\") +  \n  ylim(-2500, 2500) +\n  theme_bw()\n\nplot3"
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#model-uncertainty",
    "href": "fitting-exercise/fitting-exercise.html#model-uncertainty",
    "title": "fitting-exercise",
    "section": "Model Uncertainty",
    "text": "Model Uncertainty\nI start by setting a random seed and completing the bootstrap function for 100 samples.\n\n# Set the random seed\nset.seed(443)  \n\n# Load required libraries\n#library(rsample)\n#library(glmnet)\n\nn_bs &lt;- 100\n\n# Create 100 bootstrap samples using training data\ntrain_bs &lt;- bootstraps(train_data, times = n_bs)\n\nI then create a loop to fit the model and make predictions using the 100 samples.\n\n# Function to make predictions using a fitted model for a given data set\nmake_predictions &lt;- function(model, data) {\n  predictions &lt;- predict(model, data)\n  return(predictions)\n}\n\n# Loop over each bootstrap sample, fit model, and make predictions\nbs_predictions &lt;- vector(\"list\", length = n_bs)\nfor (i in 1:n_bs) {\n  # Get a single bootstrap sample\n  bs_sample &lt;- rsample::analysis(train_bs$splits[[i]])\n  # Make predictions using the fitted model\n  bs_predictions[[i]] &lt;- make_predictions(linfit_all1, bs_sample)\n}\n# Convert bs_predictions into a matrix\nbs_predictions_matrix &lt;- do.call(cbind, bs_predictions)\n# Compute quantiles\npreds &lt;- apply(bs_predictions_matrix, 2, quantile, c(0.055, 0.5, 0.945))\n\nI then create a data frame to plot all necessary components of the graph including observed data, point estimates from the original predicted data, median and both confidence interval bounds for each sample prediction.\n\n# Create a data frame containing the observed values and predictions\nbs_plot &lt;- data.frame(\n  Observed = fitted_all$Y,\n  PointEstimate = fitted_all$.pred,  \n  Median = preds[, 2],  \n  LowerBound = preds[, 1],  \n  UpperBound = preds[, 3]   \n)\n\nplot4 &lt;- ggplot(bs_plot, aes(x = Observed, y = PointEstimate)) +\n  geom_point(color = \"orange\") +  \n  geom_errorbar(aes(ymin = LowerBound, ymax = UpperBound), width = 0.1, color = \"lightblue\") +   \n  geom_point(aes(y = Median), color = \"darkred\") +  \n  geom_abline(slope = 1, intercept = 0, linetype = \"dashed\", color = \"orange\") +  \n  labs(x = \"Observed Values\", y = \"Predicted Values\", title = \"Observed vs. Predicted Values for Model 2\") +\n  xlim(0, 6000) + ylim(0, 6000)+\n  theme_bw()  \n\n# Print the plot\nprint(plot4)\n\n\n\n\nUpon review of the graph, numerous overlaps are apparent between the prediction medians from the bootstrap samples and the observed values obtained from the original fit. Scattered points suggest the potential influence of additional factors on the data. The new predicted medians and the original observations closely follow the 45-degree line, indicating considerable similarity between the predicted and observed values from both the original fit and the bootstrap fits. This alignment shows the strength of the model in capturing the underlying patterns in the data."
  },
  {
    "objectID": "fitting-exercise/fitting-exercise.html#final-evaluation-using-test-data",
    "href": "fitting-exercise/fitting-exercise.html#final-evaluation-using-test-data",
    "title": "fitting-exercise",
    "section": "Final Evaluation Using Test Data",
    "text": "Final Evaluation Using Test Data\nFinally, I assessed the performance of the fit of the model including all the predictors on the test data.\n\n#predicting the test data\nlinfit_test&lt;-lin_mod%&gt;%fit(Y~., test_data)\nfitted.all_test &lt;- predict(linfit_test, new_data = test_data)\n\n#print the results\ntidy(linfit_test)\n\n# A tibble: 6 × 5\n  term        estimate std.error statistic       p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n1 (Intercept)  -1722.    3052.      -0.564 0.578        \n2 DOSE            74.2      8.05     9.21  0.00000000240\n3 AGE             16.0     11.7      1.36  0.187        \n4 SEX2           230.     288.       0.799 0.432        \n5 WT             -23.6      9.78    -2.41  0.0239       \n6 HT            1564.    1786.       0.876 0.390        \n\n\nI created a plot of predicted values by observed data for both training and test data.\nFirst, I created a combined data frame of the values in long format.\n\n#Creating an object for the outcome variable Y from the training data\n\nobserved_values_train &lt;- train_data$Y\n\n#Creating an object for the outcome variable Y from the test data\n\nobserved_values_test &lt;- test_data$Y\n\n#Creating a new data frame containing columns for observed and predicted values of the TRAIN data using fit of model the including all predictors. \n\ndf_all_train &lt;- data.frame(Observed= observed_values_train, Predicted = fitted_all$.pred, Model=\"Train\")\n\n#Creating a new data frame containing columns for observed and predicted values of the TEST data  using fit of the model including all predictors. \ndf_all_test&lt;- data.frame(Observed = observed_values_test, Predicted = fitted.all_test$.pred, Model=\"Test\")\n\n#Combining all the Observed and predicted values of the train data and test data by rows to create a long format data\n\ncombined_df &lt;- rbind(df_all_train, df_all_test)\n\n#Plotting of combined predicted vs observed data for the train data and test data\n\nggplot(combined_df, aes(x=Observed, y=Predicted, color=Model))+\n  geom_point()+ \n  scale_color_manual(values = c(\"Train\"=\"blue\", \"Test\"=\"red\")) + \n  geom_abline(intercept = 0, slope = 1, linetype = \"solid\", color=\"black\") + #45 degree line\n  xlim(0, 5000) + #X-axis limits\n  ylim(0, 5000) + #y-axis limits\n  labs(x= \"Observed Values\", y =\"Predicted Values\", title = \"Predicted vs. Observed Values\")+\n  theme_minimal() # Use a minimal theme\n\n\n\n\nThe predictions for the test data appear to integrate well with those from the training data throughout the plot. Both sets of predictions seem to reasonably spreading around the line of perfect fit though the scatter still exhibits some pattern. Notably, in reasons where the training data predictions exhibit a wider spread, those are followed by predictions from the test data. This suggests that the model is performing well on the unseen data. While the overall spread in the predictions suggests the presence of additional factors influencing the outcome variable, the model is demonstrating a good performance when it comes to handling new data.\nFrom the analyses, we can say that the null model is not much informative except for predicting the mean of the outcome variable. The model predicted by Dose accounts for some variance in the outcome variable and offers a few more insights over the null model. It may be usable in studies where the effects of dose is of paramount importance than any other factors. The full model with all the predictors improve the results. However, without sufficient knowledge about the specific study, it is hard to say whether the results make sense or not or if the model can be used for any real purpose."
  },
  {
    "objectID": "presentation-exercise/presentation-exercise.html",
    "href": "presentation-exercise/presentation-exercise.html",
    "title": "Presentation Exercise",
    "section": "",
    "text": "I have re-created the chart titled “Share of members in Congress from each generation in Congress today”. This chart is a part of an article titled, ‘Congress Today Is Older Than it’s Even Been’ which was published on FiveThirtyEight website on April 3, 2023. The article, accessible at FiveThirtyEight, provides an insightful look at the age composition of Congress, supported by publicly available data.\nThe article can be found at https://fivethirtyeight.com/features/aging-congress-boomers/\n\n#Loading packages required for the task\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(ggplot2)\nlibrary(here)\nlibrary(readr)\nlibrary(scales)\nlibrary(gt)\nlibrary(DT)\nlibrary(dplyr)\n\n\n# Importing the data\ndata_path &lt;- here(\"presentation-exercise/data_aging_congress.csv\")\n\n# Reading the csv file using the path\ndata &lt;- read_csv(data_path)\n\nRows: 29120 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): chamber, state_abbrev, bioname, bioguide_id, generation\ndbl  (6): congress, party_code, cmltv_cong, cmltv_chamber, age_days, age_years\ndate (2): start_date, birthday\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nChecking the data structure and summary\n\nstr(data)\n\nspc_tbl_ [29,120 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ congress     : num [1:29120] 82 80 81 82 83 84 85 86 87 88 ...\n $ start_date   : Date[1:29120], format: \"1951-01-03\" \"1947-01-03\" ...\n $ chamber      : chr [1:29120] \"House\" \"House\" \"House\" \"House\" ...\n $ state_abbrev : chr [1:29120] \"ND\" \"VA\" \"VA\" \"VA\" ...\n $ party_code   : num [1:29120] 200 100 100 100 100 100 100 100 100 100 ...\n $ bioname      : chr [1:29120] \"AANDAHL, Fred George\" \"ABBITT, Watkins Moorman\" \"ABBITT, Watkins Moorman\" \"ABBITT, Watkins Moorman\" ...\n $ bioguide_id  : chr [1:29120] \"A000001\" \"A000002\" \"A000002\" \"A000002\" ...\n $ birthday     : Date[1:29120], format: \"1897-04-09\" \"1908-05-21\" ...\n $ cmltv_cong   : num [1:29120] 1 1 2 3 4 5 6 7 8 9 ...\n $ cmltv_chamber: num [1:29120] 1 1 2 3 4 5 6 7 8 9 ...\n $ age_days     : num [1:29120] 19626 14106 14837 15567 16298 ...\n $ age_years    : num [1:29120] 53.7 38.6 40.6 42.6 44.6 ...\n $ generation   : chr [1:29120] \"Lost\" \"Greatest\" \"Greatest\" \"Greatest\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   congress = col_double(),\n  ..   start_date = col_date(format = \"\"),\n  ..   chamber = col_character(),\n  ..   state_abbrev = col_character(),\n  ..   party_code = col_double(),\n  ..   bioname = col_character(),\n  ..   bioguide_id = col_character(),\n  ..   birthday = col_date(format = \"\"),\n  ..   cmltv_cong = col_double(),\n  ..   cmltv_chamber = col_double(),\n  ..   age_days = col_double(),\n  ..   age_years = col_double(),\n  ..   generation = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\nsummary(data)\n\n    congress        start_date           chamber          state_abbrev      \n Min.   : 66.00   Min.   :1919-03-04   Length:29120       Length:29120      \n 1st Qu.: 79.00   1st Qu.:1945-01-03   Class :character   Class :character  \n Median : 92.00   Median :1971-01-03   Mode  :character   Mode  :character  \n Mean   : 91.88   Mean   :1970-10-18                                        \n 3rd Qu.:105.00   3rd Qu.:1997-01-03                                        \n Max.   :118.00   Max.   :2023-01-03                                        \n   party_code      bioname          bioguide_id           birthday         \n Min.   :100.0   Length:29120       Length:29120       Min.   :1835-06-10  \n 1st Qu.:100.0   Class :character   Class :character   1st Qu.:1891-12-21  \n Median :100.0   Mode  :character   Mode  :character   Median :1918-11-22  \n Mean   :146.7                                         Mean   :1917-01-24  \n 3rd Qu.:200.0                                         3rd Qu.:1943-05-16  \n Max.   :537.0                                         Max.   :1997-01-17  \n   cmltv_cong     cmltv_chamber       age_days       age_years    \n Min.   : 1.000   Min.   : 1.000   Min.   : 8644   Min.   :23.67  \n 1st Qu.: 2.000   1st Qu.: 2.000   1st Qu.:16732   1st Qu.:45.81  \n Median : 4.000   Median : 4.000   Median :19523   Median :53.45  \n Mean   : 5.414   Mean   : 5.112   Mean   :19626   Mean   :53.73  \n 3rd Qu.: 8.000   3rd Qu.: 7.000   3rd Qu.:22359   3rd Qu.:61.22  \n Max.   :30.000   Max.   :30.000   Max.   :35824   Max.   :98.08  \n  generation       \n Length:29120      \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n\n\nThe graph is a stacked area chart which shows the composition of U.S. Congress over time by the generations of its members. The dataset includes details of the congress members such as identification number, name, state, birthday, age in days, age in years, the generation the member belongs to, and total numbers of the Congress and the chambers attended by each member.\nThe preparation of the data involved setting the generation order and transforming the ‘start_date’ into a year format. With the help of Chat GPT, I was able to use mutate, group_by, and summarise functions in R to create year, and calculate counts and proportions of Congress members by generation and year. The ggplot2 package helped creation of the chart that replicated the original’s aesthetics. The data manipulation enabled the recreation of the stacked area chart with precision, although aligning the legend exactly as in the original chart proved to be a challenge. I managed to display the legends in two rows with slight differences from the original chart. The process was iterative. A key finding in this process was the importance of ordering the ‘generation’ categories from youngest to oldest to accurately replicate the original chart.\n\n# Set the order of generations from the youngest to the oldest\n\ngeneration_levels &lt;- c(\"Gen Z\", \"Millennial\", \"Gen X\", \"Boomers\", \"Silent\", \"Greatest\", \"Lost\", \"Missionary\", \"Progressive\", \"Gilded\")\n\n\n# Prepare the data for plotting\n  data_processed &lt;- data %&gt;%\n      #Convert 'start_date' to year\n    mutate(year = year(ymd(start_date)), \n     #Set generation in the order as described in generation_levels\n       generation = factor(generation, levels = generation_levels)) %&gt;% \n        #Group generation by year\n          group_by(year, generation) %&gt;%\n          #Count the number of members per generation and year       \n            summarise(count = n(), .groups = 'drop') %&gt;%\n              group_by(year) %&gt;%\n              #Calculate proportion of each generation per year           \n                mutate(total = sum(count), proportion = count / total) %&gt;%\n                  \n                #Ungroup the data frame for plotting              \n                  ungroup()\n   \n  \n# Convert 'generation' to uppercase\ndata_processed &lt;- data_processed %&gt;%\n  mutate(generation = toupper(as.character(generation)),\n         generation = factor(generation, levels = toupper(generation_levels)))\n\nGenerating the chart using the data and placing it with the original chart.The final chart almost replicates the original chart except for some minor differences such as the appearance of the horizontal grid lines and the legends.\n\n# Include the PNG image\nknitr::include_graphics(\"Graph_Original.png\")\n\n# Plot the data with ggplot2\nggplot(data_processed, aes(x = year, y = proportion, fill = generation, group = generation)) +\n  geom_area(position = 'stack', color='white') +\n  #Set breaks at intervals of 10 years\n    scale_x_continuous(breaks = seq(1920, 2023, by = 10),\n                     #Set limits from 1920 to 2023\n                     limits = c(1920, 2023)) +        \n      #Scale the y-axis from 0% to 100% with intervals of 20%    \n        scale_y_continuous(labels = percent_format(), breaks = seq(0, 1, by = 0.2), limits = c(0, 1)) +\n  scale_fill_manual(values = c(\"GILDED\" = \"gold3\",     # Applying the closest color to each generation\n                               \"PROGRESSIVE\" = \"pink\",\n                               \"MISSIONARY\" = \"violet\",\n                               \"LOST\" = \"gray50\",\n                               \"GREATEST\" = \"aquamarine\",\n                               \"SILENT\" = \"yellow2\",\n                               \"BOOMERS\" = \"orange\",\n                               \"GEN X\" = \"slateblue1\",\n                               \"MILLENNIAL\" = \"skyblue\",\n                               \"GEN Z\" = \"magenta\"),\n  name = \"\", # Remove the legend title\n  #Arranging the legend items in two rows and in reverse order of generation_level\n  guide = guide_legend(nrow = 2, reverse = TRUE)) + \n\n  theme_minimal() +\n  labs(title = \"Share of members in Congress from each generation, 1919 to 2023\",\n       x = \"\",\n       y = \"\") +\n  theme(panel.ontop = TRUE,\n        legend.position = \"top\", # Position the legend at the top\n        legend.box = \"horizontal\", #Layout the legend item horizontally\n        legend.text = element_text(size = 7), #Make legend text smaller\n        legend.key.size = unit(0.4, \"cm\"), #Make legend keys smaller\n        legend.spacing.x =  unit(0.4, \"cm\"), #Adjust spacing between legend items\n        panel.grid.major.x = element_blank(), # Remove vertical grid lines\n        panel.grid.minor.x = element_blank()) # Remove minor vertical grid lines\n\n\n\n\n\n\n\nI leveraged the ‘DT’ package to construct an interactive table that mirrored the stacked area chart, adding a state column for a more granular analysis. This interactive table enables users to filter and explore the composition of Congress by generation, year, and state, offering a dynamic tool for engaging with the dataset.\n\n# Set the generations from the youngest to the oldest \n\ngeneration_levels &lt;- c(\"Gilded\", \"Progressive\",\"Missionary\",\"Lost\",\"Greatest\",\"Silent\",\"Boomers\",\"Gen X\",\"Millennial\",\"Gen Z\")\n\n#Creating a subset of the data including required columns fo the table\ndata_table &lt;- data %&gt;%\n  dplyr::mutate(year = lubridate::year(lubridate::ymd(start_date)),\n                generation = factor(generation, levels = generation_levels)) %&gt;%\n  dplyr::group_by(year, generation, state_abbrev) %&gt;%\n  dplyr::summarise(count = n(), .groups = 'drop') %&gt;%\n  dplyr::group_by(year, state_abbrev) %&gt;%\n  dplyr::mutate(total = sum(count),\n                proportion = count / total) %&gt;%\n  dplyr::ungroup() %&gt;%\n  dplyr::select(Year=year, State = state_abbrev, Generation= generation, count, total, Proportion=proportion)\n\n\n# Prepare the data for the table\ndata_for_table &lt;- data_table %&gt;%\n  select(Year, State, Generation, Proportion) %&gt;%\n  mutate(Generation = factor(Generation, levels = generation_levels))\n  \n# Render the interactive table \ndatatable(\n  data_for_table,\n  filter = 'top', # Enable filtering options at the top of the table\n  options = list(\n    pageLength = 10, # Set the initial number of rows to display\n    autoWidth = TRUE, # Adjust column width automatically\n    searching = TRUE # Enable the search box\n  ),\n  rownames = FALSE # Hide row names\n) %&gt;% \n  formatPercentage('Proportion', 2) %&gt;% # Format 'Proportion' as percentage with 2 decimals\n  \n  formatStyle(\n    columns = c('Year','Generation', 'State'), # Specify which columns to style\n    `text-align` = 'center' # Align text to the left\n  )"
  },
  {
    "objectID": "starter-analysis-exercise/code/analysis-code/readme.html",
    "href": "starter-analysis-exercise/code/analysis-code/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory analysis and statistical analysis on the processed/cleaned data. The code produces a few tables and figures, which are saved in the results folder.\nIt’s the same code done 3 times:\n\nFirst, there is an R script that you can run which does all the computations.\nSecond, there is a Quarto file which contains exactly the same code as the R script.\nThird, my current favorite, is a Quarto file with an approach where the code is pulled in from the R script and run.\n\nThe last version has the advantage of having code in one place for easy writing/debugging, and then being able to pull the code into the Quarto file for a nice combination of text/commentary and code.\nEach way of doing this is a reasonable approach, pick whichever one you prefer or makes the most sense for your setup. Whichever approach you choose, add ample documentation/commentary so you and others can easily understand what’s going on and what is done."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda.html",
    "href": "starter-analysis-exercise/code/eda-code/eda.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/Malikadhakhwa1-MADA-portfolio\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          3     \n_______________________          \nColumn type frequency:           \n  factor                   1     \n  numeric                  2     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts      \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/eda2.html",
    "href": "starter-analysis-exercise/code/eda-code/eda2.html",
    "title": "An example exploratory analysis script",
    "section": "",
    "text": "This Quarto file loads the cleaned data and does some exploring.\nI’m only showing it the way where the code is included in the file. As described in the processing_code materials, I currently prefer the approach of having R code in a separate file and pulling it in.\nBut I already had this written and haven’t yet re-done it that way. Feel free to redo and send a pull request on GitHub :)\nAgain, it is largely a matter of preference and what makes the most sense to decide if one wants to have code inside Quarto files, or as separate R files. And sometimes, an R script with enough comments is good enough and one doesn’t need a Quarto file.\nAlso note that while here I split cleaning and exploring, this is iterative. You saw that as part of the processing, we already had to explore the data somewhat to understand how to clean it. In general, as you explore, you’ll find things that need cleaning. As you clean, you can explore more. Therefore, at times it might make more sense to combine the cleaning and exploring code parts into a single R or Quarto file. Or split things in any other logical way.\nAs part of the exploratory analysis, you should produce plots or tables or other summary quantities for the most interesting/important quantities in your data. Depending on the total number of variables in your dataset, explore all or some of the others. Figures produced here might be histograms or density plots, correlation plots, etc. Tables might summarize your data.\nStart by exploring one variable at a time. Then continue by creating plots or tables of the outcome(s) of interest and the predictor/exposure/input variables you are most interested in. If your dataset is small, you can do that for all variables.\nPlots produced here can be scatterplots, boxplots, violinplots, etc. Tables can be simple 2x2 tables or larger ones.\n\nSetup\n\n#load needed packages. make sure they are installed.\nlibrary(here) #for data loading/saving\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/Malikadhakhwa1-MADA-portfolio\n\nlibrary(dplyr)\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(skimr)\n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(ggplot2)\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nLoad the data.\n\n#Path to data. Note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\n#load data\nmydata &lt;- readRDS(data_location)\n\n\n\nData exploration through tables\nShowing a bit of code to produce and save a summary table.\n\nsummary_df = skimr::skim(mydata)\nprint(summary_df)\n\n── Data Summary ────────────────────────\n                           Values\nName                       mydata\nNumber of rows             9     \nNumber of columns          5     \n_______________________          \nColumn type frequency:           \n  factor                   2     \n  numeric                  3     \n________________________         \nGroup variables            None  \n\n── Variable type: factor ───────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate ordered n_unique top_counts            \n1 Gender                0             1 FALSE          3 M: 4, F: 3, O: 2      \n2 Race                  0             1 FALSE          3 Oth: 4, Whi: 3, Bla: 2\n\n── Variable type: numeric ──────────────────────────────────────────────────────\n  skim_variable n_missing complete_rate  mean   sd  p0 p25 p50 p75 p100 hist \n1 Height                0             1 166.  16.0 133 156 166 178  183 ▂▁▃▃▇\n2 Weight                0             1  70.1 21.2  45  55  70  80  110 ▇▂▃▂▂\n3 Age                   0             1  36   18.2  17  22  30  45   70 ▇▂▃▂▂\n\n# save to file\nsummarytable_file = here(\"starter-analysis-exercise\",\"results\", \"tables-files\", \"summarytable.rds\")\nsaveRDS(summary_df, file = summarytable_file)\n\nWe are saving the results to the results/tables folder. Structure the folders inside results such that they make sense for your specific analysis. Provide enough documentation that someone can understand what you are doing and what goes where. readme.md files inside each folder are a good idea.\n\n\nData exploration through figures\nHistogram plots for the continuous outcomes.\nHeight first.\n\np1 &lt;- mydata %&gt;% ggplot(aes(x=Height)) + geom_histogram() \nplot(p1)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-distribution.png\")\nggsave(filename = figure_file, plot=p1) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow weights.\n\np2 &lt;- mydata %&gt;% ggplot(aes(x=Weight)) + geom_histogram() \nplot(p2)\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"weight-distribution.png\")\nggsave(filename = figure_file, plot=p2) \n\nSaving 7 x 5 in image\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nNow height as function of weight.\n\np3 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight)) + geom_point() + geom_smooth(method='lm')\nplot(p3)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight.png\")\nggsave(filename = figure_file, plot=p3) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nOnce more height as function of weight, stratified by gender. Note that there is so little data, it’s a bit silly. But we’ll plot it anyway.\n\np4 &lt;- mydata %&gt;% ggplot(aes(x=Height, y=Weight, color = Gender)) + geom_point() + geom_smooth(method='lm')\nplot(p4)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\n\nWarning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning\n-Inf\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"height-weight-stratified.png\")\nggsave(filename = figure_file, plot=p4) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning in qt((1 - level)/2, df): NaNs produced\n\nWarning in qt((1 - level)/2, df): no non-missing arguments to max; returning\n-Inf\n\n\nHeight as a function of Race\n\np5 &lt;- mydata %&gt;% ggplot(aes(x=Race, y=Height)) + geom_boxplot() \nplot(p5)\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"Race-Height.png\")\nggsave(filename = figure_file, plot=p5) \n\nSaving 7 x 5 in image\n\n\nAge as a function of Weight\n\np6 &lt;- mydata %&gt;% ggplot(aes(x=Weight, y=Age)) + geom_point() + geom_smooth(method='lm')\nplot(p6)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nfigure_file = here(\"starter-analysis-exercise\",\"results\",\"figures\",\"Weight-Age.png\")\nggsave(filename = figure_file, plot=p6) \n\nSaving 7 x 5 in image\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\nNotes\nFor your own explorations, tables and figures can be “quick and dirty”. As long as you can see what’s going on, there is no need to polish them. That’s in contrast to figures you’ll produce for your final products (paper, report, presentation, website, etc.). Those should look as nice, polished and easy to understand as possible."
  },
  {
    "objectID": "starter-analysis-exercise/code/eda-code/readme.html",
    "href": "starter-analysis-exercise/code/eda-code/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code to do some simple exploratory data analysis (EDA) on the processed/cleaned data. The code produces a few tables and figures, which are saved in the appropriate results sub-folder."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\n\nWarning: package 'readxl' was built under R version 4.2.3\n\nlibrary(dplyr) #for data processing/cleaning\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/Malikadhakhwa1-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 3 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 3\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n\nsummary(rawdata)\n\n    Height              Weight          Gender         \n Length:14          Min.   :  45.0   Length:14         \n Class :character   1st Qu.:  55.0   Class :character  \n Mode  :character   Median :  70.0   Mode  :character  \n                    Mean   : 602.7                     \n                    3rd Qu.:  90.0                     \n                    Max.   :7000.0                     \n                    NA's   :1                          \n\nhead(rawdata)\n\n# A tibble: 6 × 3\n  Height Weight Gender\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt; \n1 180        80 M     \n2 175        70 O     \n3 sixty      60 F     \n4 178        76 F     \n5 192        90 NA    \n6 6          55 F     \n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55\n70\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85\n110\n▇▂▃▃▂\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n3\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n1\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\n\n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d4\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "href": "starter-analysis-exercise/code/processing-code/processingfile2.html",
    "title": "An example cleaning script",
    "section": "",
    "text": "Processing script\nThis Quarto file contains a mix of code and explanatory text to illustrate a simple data processing/cleaning setup.\n\n\nSetup\nLoad needed packages. make sure they are installed.\n\nlibrary(readxl) #for loading Excel files\n\nWarning: package 'readxl' was built under R version 4.2.3\n\nlibrary(dplyr) #for data processing/cleaning\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyr) #for data processing/cleaning\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\nlibrary(skimr) #for nice visualization of data \n\nWarning: package 'skimr' was built under R version 4.2.3\n\nlibrary(here) #to set paths\n\nWarning: package 'here' was built under R version 4.2.3\n\n\nhere() starts at C:/Users/malik/Documents/1. UGA Classes/15. Malika Spring 2024/MADASpring_24/Malikadhakhwa1-MADA-portfolio\n\n\n\n\nData loading\nNote that for functions that come from specific packages (instead of base R), I often specify both package and function like so: package::function() that’s not required one could just call the function specifying the package makes it clearer where the function “lives”, but it adds typing. You can do it either way.\n\n# path to data\n# note the use of the here() package and not absolute paths\ndata_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"raw-data\",\"exampledata2.xlsx\")\nrawdata &lt;- readxl::read_excel(data_location)\n\n\n\nCheck data\nFirst we can look at the codebook\n\ncodebook &lt;- readxl::read_excel(data_location, sheet =\"Codebook\")\nprint(codebook)\n\n# A tibble: 5 × 3\n  `Variable Name` `Variable Definition`                 `Allowed Values`      \n  &lt;chr&gt;           &lt;chr&gt;                                 &lt;chr&gt;                 \n1 Height          height in centimeters                 numeric value &gt;0 or NA\n2 Weight          weight in kilograms                   numeric value &gt;0 or NA\n3 Gender          identified gender (male/female/other) M/F/O/NA              \n4 Age             Age in years                          numeric value &gt;0 or NA\n5 Race            identified Race (White/Black/Other)   White/Black/Other     \n\n\nSeveral ways of looking at the data\n\ndplyr::glimpse(rawdata)\n\nRows: 14\nColumns: 5\n$ Height &lt;chr&gt; \"180\", \"175\", \"sixty\", \"178\", \"192\", \"6\", \"156\", \"166\", \"155\", …\n$ Weight &lt;dbl&gt; 80, 70, 60, 76, 90, 55, 90, 110, 54, 7000, NA, 45, 55, 50\n$ Gender &lt;chr&gt; \"M\", \"O\", \"F\", \"F\", \"NA\", \"F\", \"O\", \"M\", \"N\", \"M\", \"F\", \"F\", \"M…\n$ Age    &lt;dbl&gt; 17, 20, 25, 23, 50, 30, 70, 45, 75, 37, 26, 22, 42, 55\n$ Race   &lt;chr&gt; \"White\", \"Black\", \"Other\", \"Other\", \"White\", \"White\", \"Other\", …\n\nsummary(rawdata)\n\n    Height              Weight          Gender               Age       \n Length:14          Min.   :  45.0   Length:14          Min.   :17.00  \n Class :character   1st Qu.:  55.0   Class :character   1st Qu.:23.50  \n Mode  :character   Median :  70.0   Mode  :character   Median :33.50  \n                    Mean   : 602.7                      Mean   :38.36  \n                    3rd Qu.:  90.0                      3rd Qu.:48.75  \n                    Max.   :7000.0                      Max.   :75.00  \n                    NA's   :1                                          \n     Race          \n Length:14         \n Class :character  \n Mode  :character  \n                   \n                   \n                   \n                   \n\nhead(rawdata)\n\n# A tibble: 6 × 5\n  Height Weight Gender   Age Race \n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;\n1 180        80 M         17 White\n2 175        70 O         20 Black\n3 sixty      60 F         25 Other\n4 178        76 F         23 Other\n5 192        90 NA        50 White\n6 6          55 F         30 White\n\nskimr::skim(rawdata)\n\n\nData summary\n\n\nName\nrawdata\n\n\nNumber of rows\n14\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n2\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nHeight\n0\n1\n1\n5\n0\n13\n0\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nRace\n0\n1\n5\n5\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nWeight\n1\n0.93\n602.69\n1922.25\n45\n55.0\n70.0\n90.00\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n38.36\n18.63\n17\n23.5\n33.5\n48.75\n75\n▇▂▃▁▂\n\n\n\n\n\n\n\nCleaning\nBy inspecting the data as done above, we find some problems that need addressing:\nFirst, there is an entry for height which says “sixty” instead of a number. Does that mean it should be a numeric 60? It somehow doesn’t make sense since the weight is 60kg, which can’t happen for a 60cm person (a baby). Since we don’t know how to fix this, we might decide to remove the person. This “sixty” entry also turned all Height entries into characters instead of numeric. That conversion to character also means that our summary function isn’t very meaningful. So let’s fix that first.\n\nd1 &lt;- rawdata %&gt;% dplyr::filter( Height != \"sixty\" ) %&gt;% \n                  dplyr::mutate(Height = as.numeric(Height))\nskimr::skim(d1)\n\n\nData summary\n\n\nName\nd1\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nRace\n0\n1\n5\n5\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n151.62\n46.46\n6\n154.00\n165\n175\n192\n▁▁▁▂▇\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n39.38\n18.98\n17\n23.00\n37\n50\n75\n▇▃▅▂▃\n\n\n\n\nhist(d1$Height)\n\n\n\n\nNow we see that there is one person with a height of 6. That could be a typo, or someone mistakenly entered their height in feet. Since we unfortunately don’t know, we might need to remove this person, which we’ll do here.\n\nd2 &lt;- d1 %&gt;% dplyr::mutate( Height = replace(Height, Height==\"6\",round(6*30.48,0)) )\nskimr::skim(d2)\n\n\nData summary\n\n\nName\nd2\n\n\nNumber of rows\n13\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nRace\n0\n1\n5\n5\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1.00\n165.23\n16.52\n133\n155.00\n166\n178\n192\n▂▇▆▆▃\n\n\nWeight\n1\n0.92\n647.92\n2000.48\n45\n54.75\n73\n90\n7000\n▇▁▁▁▁\n\n\nAge\n0\n1.00\n39.38\n18.98\n17\n23.00\n37\n50\n75\n▇▃▅▂▃\n\n\n\n\n\nHeight values seem ok now.\nNow let’s look at the Weight variable. There is a person with weight of 7000, which is impossible, and one person with missing weight. To be able to analyze the data, we’ll remove those individuals as well.\n\nd3 &lt;- d2 %&gt;%  dplyr::filter(Weight != 7000) %&gt;% tidyr::drop_na()\nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n1\n2\n0\n5\n0\n\n\nRace\n0\n1\n5\n5\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n40.82\n20.28\n17\n22.5\n42\n52.5\n75\n▇▂▆▂▃\n\n\n\n\n\nNow checking the Gender variable. Gender should be a categorical/factor variable but is loaded as character. We can fix that with simple base R code to mix things up.\n\nd3$Gender &lt;- as.factor(d3$Gender)  \nskimr::skim(d3)\n\n\nData summary\n\n\nName\nd3\n\n\nNumber of rows\n11\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nRace\n0\n1\n5\n5\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n5\nM: 4, F: 3, O: 2, N: 1\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n167.09\n16.81\n133\n155.5\n166\n179.0\n192\n▂▇▅▇▅\n\n\nWeight\n0\n1\n70.45\n20.65\n45\n54.5\n70\n85.0\n110\n▇▂▃▃▂\n\n\nAge\n0\n1\n40.82\n20.28\n17\n22.5\n42\n52.5\n75\n▇▂▆▂▃\n\n\n\n\n\nNow we see that there is another NA, but it’s not NA from R, instead it was loaded as character and is now considered as a category. Well proceed here by removing that individual with that NA entry. Since this keeps an empty category for Gender, I’m also using droplevels() to get rid of it.\n\nd4 &lt;- d3 %&gt;% dplyr::filter( !(Gender %in% c(\"NA\",\"N\")) ) %&gt;% droplevels()\nskimr::skim(d4)\n\n\nData summary\n\n\nName\nd4\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nRace\n0\n1\n5\n5\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nAge\n0\n1\n36.00\n18.21\n17\n22\n30\n45\n70\n▇▂▃▂▂\n\n\n\n\n\n\nd5&lt;-d4%&gt;% dplyr::mutate(Age = as.numeric(Age))\nskimr::skim(d5)\n\n\nData summary\n\n\nName\nd5\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n1\n\n\nfactor\n1\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nRace\n0\n1\n5\n5\n0\n3\n0\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nAge\n0\n1\n36.00\n18.21\n17\n22\n30\n45\n70\n▇▂▃▂▂\n\n\n\n\nhist(d5$Age)\n\n\n\n\n\nd5$Race &lt;- as.factor(d5$Race)\nskimr::skim(d5)\n\n\nData summary\n\n\nName\nd5\n\n\nNumber of rows\n9\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\n\n\nRace\n0\n1\nFALSE\n3\nOth: 4, Whi: 3, Bla: 2\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nHeight\n0\n1\n165.67\n15.98\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nWeight\n0\n1\n70.11\n21.25\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nAge\n0\n1\n36.00\n18.21\n17\n22\n30\n45\n70\n▇▂▃▂▂\n\n\n\n\nsummary(d5)\n\n     Height          Weight       Gender      Age        Race  \n Min.   :133.0   Min.   : 45.00   F:3    Min.   :17   Black:2  \n 1st Qu.:156.0   1st Qu.: 55.00   M:4    1st Qu.:22   Other:4  \n Median :166.0   Median : 70.00   O:2    Median :30   White:3  \n Mean   :165.7   Mean   : 70.11          Mean   :36            \n 3rd Qu.:178.0   3rd Qu.: 80.00          3rd Qu.:45            \n Max.   :183.0   Max.   :110.00          Max.   :70            \n\n\nAll done, data is clean now.\nLet’s assign at the end to some final variable, this makes it easier to add further cleaning steps above.\n\nprocesseddata &lt;- d5\n\n\n\nSave data\nFinally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data: http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata\n\nsave_data_location &lt;- here::here(\"starter-analysis-exercise\",\"data\",\"processed-data\",\"processeddata2.rds\")\nsaveRDS(processeddata, file = save_data_location)\n\nNote the use of the here package and here command to specify a path relative to the main project directory, that is the folder that contains the .Rproj file. Always use this approach instead of hard-coding file paths that only exist on your computer.\n\n\nNotes\nRemoving anyone observation with “faulty” or missing data is one approach. It’s often not the best. based on your question and your analysis approach, you might want to do cleaning differently (e.g. keep observations with some missing information)."
  },
  {
    "objectID": "starter-analysis-exercise/code/processing-code/readme.html",
    "href": "starter-analysis-exercise/code/processing-code/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains code for processing data.\nCurrently, there is just a single Quarto file to illustrate how the processing can look like.\nInstead of a Quarto file that contains code, it is also possible to use R scripts or a combination of R scripts and Quarto code. Those approaches are illustrated in the full dataanalysis-template repository."
  },
  {
    "objectID": "starter-analysis-exercise/code/readme.html",
    "href": "starter-analysis-exercise/code/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "Place your various R or Quarto files in the appropriate folders.\nYou can either have fewer large scripts, or multiple scripts that do only specific actions. Those can be R or Quarto files. In either case, document the scripts and what goes on in them so well that someone else (including future you) can easily figure out what is happening.\nThe scripts should load the appropriate data (e.g. raw or processed), perform actions, and save results (e.g. processed data, figures, computed values) in the appropriate folders. Document somewhere what inputs each script takes and where output is placed.\nIf scripts need to be run in a specific order, document this. Either as comments in the script, or in a separate text file such as this readme file. Ideally of course in both locations.\nDepending on your specific project, you might want to have further folders/sub-folders."
  },
  {
    "objectID": "starter-analysis-exercise/data/raw-data/readme.html",
    "href": "starter-analysis-exercise/data/raw-data/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains a simple made-up data-set in an Excel file.\nIt contains the variables Height, Weight and Gender of a few imaginary individuals.\nThe dataset purposefully contains some faulty entries that need to be cleaned.\nGenerally, any dataset should contain some meta-data explaining what each variable in the dataset is. (This is often called a Codebook.) For this simple example, the codebook is given as a second sheet in the Excel file.\nThis raw data-set should generally not be edited by hand. It should instead be loaded and processed/cleaned using code."
  },
  {
    "objectID": "starter-analysis-exercise/data/readme.html",
    "href": "starter-analysis-exercise/data/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all data at various stages.\nThis data is being loaded/manipulated/changed/saved with code from the code folders.\nYou should place the raw data in the raw_data folder and not edit it. Ever!\nIdeally, load the raw data into R and do all changes there with code, so everything is automatically reproducible and documented.\nSometimes, you need to edit the files in the format you got. For instance, Excel files are sometimes so poorly formatted that it’s close to impossible to read them into R, or the persons you got the data from used color to code some information, which of course won’t import into R. In those cases, you might have to make modifications in a software other than R. If you need to make edits in whatever format you got the data (e.g. Excel), make a copy and place those copies in a separate folder, AND ONLY EDIT THOSE COPIES. Also, write down somewhere the edits you made.\nAdd as many sub-folders as suitable. If you only have a single processing step, one sub-folder for processed data is enough. If you have multiple stages of cleaning and processing, additional sub-folders might be useful. Adjust based on the complexity of your project.\nI suggest you save your processed and cleaned data as RDS or RDA/Rdata files. This preserves coding like factors, characters, numeric, etc. If you save as CSV, that information would get lost. However, CSV is better for sharing with others since it’s plain text. If you do CSV, you might want to write down somewhere what each variable is.\nSee here for some suggestions on how to store your processed data:\nhttp://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata"
  },
  {
    "objectID": "starter-analysis-exercise/products/readme.html",
    "href": "starter-analysis-exercise/products/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "The folders inside this folder should contain all the products of your project.\nFor a classical academic project, this will be a peer-reviewed manuscript, and should be placed into a manuscript folder.\nFor our case, since we’ll want to put it on the website, we call it a report.\nOften you need a library of references in bibtex format, as well as a CSL style file that determines reference formatting. Since those files might be used by several of the products, I’m placing them in the main products folder. Feel free to re-organize."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "",
    "text": "#Mutsa Nyamuranga contributed to this exercise\nThe structure below is one possible setup for a data analysis project (including the course project). For a manuscript, adjust as needed. You don’t need to have exactly these sections, but the content covering those sections should be addressed.\nThis uses MS Word as output format. See here for more information. You can switch to other formats, like html or pdf. See the Quarto documentation for other formats.\nWarning: package 'here' was built under R version 4.2.3"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#general-background-information",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.1 General Background Information",
    "text": "2.1 General Background Information\nProvide enough background on your topic that others can understand the why and how of your analysis"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#description-of-data-and-data-source",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.2 Description of data and data source",
    "text": "2.2 Description of data and data source\nDescribe what the data is, what it contains, where it is from, etc. Eventually this might be part of a methods section."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#questionshypotheses-to-be-addressed",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "2.3 Questions/Hypotheses to be addressed",
    "text": "2.3 Questions/Hypotheses to be addressed\nState the research questions you plan to answer with this analysis.\nTo cite other work (important everywhere, but likely happens first in introduction), make sure your references are in the bibtex file specified in the YAML header above (here dataanalysis_template_references.bib) and have the right bibtex key. Then you can include like this:\nExamples of reproducible research projects can for instance be found in (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, Shen, & Handel, 2020)"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-aquisition",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.1 Data aquisition",
    "text": "3.1 Data aquisition\nAs applicable, explain where and how you got the data. If you directly import the data from an online source, you can combine this section with the next."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#data-import-and-cleaning",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.2 Data import and cleaning",
    "text": "3.2 Data import and cleaning\nWrite code that reads in the file and cleans it so it’s ready for analysis. Since this will be fairly long code for most datasets, it might be a good idea to have it in one or several R scripts. If that is the case, explain here briefly what kind of cleaning/processing you do, and provide more details and well documented code somewhere (e.g. as supplement in a paper). All materials, including files that contain code, should be commented well so everyone can follow along."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "3.3 Statistical analysis",
    "text": "3.3 Statistical analysis\nExplain anything related to your statistical analyses."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#exploratorydescriptive-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.1 Exploratory/Descriptive analysis",
    "text": "4.1 Exploratory/Descriptive analysis\nUse a combination of text/tables/figures to explore and describe your data. Show the most important descriptive results here. Additional ones should go in the supplement. Even more can be in the R and Quarto files that are part of your project.\nTable 1 shows a summary of the data.\nNote the loading of the data providing a relative path using the ../../ notation. (Two dots means a folder up). You never want to specify an absolute path like C:\\ahandel\\myproject\\results\\ because if you share this with someone, it won’t work for them since they don’t have that path. You can also use the here R package to create paths. See examples of that below. I recommend the here package, but I’m showing the other approach here just in case you encounter it.\n\n\n\n\nTable 1: Data summary table.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_type\nskim_variable\nn_missing\ncomplete_rate\nfactor.ordered\nfactor.n_unique\nfactor.top_counts\nnumeric.mean\nnumeric.sd\nnumeric.p0\nnumeric.p25\nnumeric.p50\nnumeric.p75\nnumeric.p100\nnumeric.hist\n\n\n\n\nfactor\nGender\n0\n1\nFALSE\n3\nM: 4, F: 3, O: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nfactor\nRace\n0\n1\nFALSE\n3\nOth: 4, Whi: 3, Bla: 2\nNA\nNA\nNA\nNA\nNA\nNA\nNA\nNA\n\n\nnumeric\nHeight\n0\n1\nNA\nNA\nNA\n165.66667\n15.97655\n133\n156\n166\n178\n183\n▂▁▃▃▇\n\n\nnumeric\nWeight\n0\n1\nNA\nNA\nNA\n70.11111\n21.24526\n45\n55\n70\n80\n110\n▇▂▃▂▂\n\n\nnumeric\nAge\n0\n1\nNA\nNA\nNA\n36.00000\n18.20714\n17\n22\n30\n45\n70\n▇▂▃▂▂"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#basic-statistical-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.2 Basic statistical analysis",
    "text": "4.2 Basic statistical analysis\nTo get some further insight into your data, if reasonable you could compute simple statistics (e.g. simple models with 1 predictor) to look for associations between your outcome(s) and each individual predictor variable. Though note that unless you pre-specified the outcome and main exposure, any “p&lt;0.05 means statistical significance” interpretation is not valid.\nFigure 1 shows a scatterplot figure produced by one of the R scripts.\n\n\n\n\n\nFigure 1: Height and weight stratified by gender."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#full-analysis",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "4.3 Full analysis",
    "text": "4.3 Full analysis\nUse one or several suitable statistical/machine learning methods to analyze your data and to produce meaningful figures, tables, etc. This might again be code that is best placed in one or several separate R scripts that need to be well documented. You want the code to produce figures and data ready for display as tables, and save those. Then you load them here.\nExample Table 2 shows a summary of a linear model fit.\n\n\n\n\nTable 2: Linear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n149.2726967\n23.3823360\n6.3839942\n0.0013962\n\n\nWeight\n0.2623972\n0.3512436\n0.7470519\n0.4886517\n\n\nGenderM\n-2.1244913\n15.5488953\n-0.1366329\n0.8966520\n\n\nGenderO\n-4.7644739\n19.0114155\n-0.2506112\n0.8120871\n\n\n\n\n\n\nFigure 2 shows a boxplot for distribution of height by Race.\n\n\n\n\n\nFigure 2: Race and Height\n\n\n\n\nFigure 3 shows a scatterplot figure produced by one of the R scripts. Appended scatterplot shows distribution of age by weight.\n\n\n\n\n\nFigure 3: Weight and Age.\n\n\n\n\nExample Table 3 shows a summary of a linear model fit.\n\n\n\n\nTable 3: Linear model fit table.\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n174.2523073\n14.6836257\n11.8671172\n0.0000748\n\n\nAge\n-0.1210422\n0.3177981\n-0.3808776\n0.7189401\n\n\nRaceOther\n-13.8580151\n13.8269574\n-1.0022462\n0.3622317\n\n\nRaceWhite\n5.7929859\n14.0569547\n0.4121082\n0.6973330"
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#summary-and-interpretation",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.1 Summary and Interpretation",
    "text": "5.1 Summary and Interpretation\nSummarize what you did, what you found and what it means."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#strengths-and-limitations",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.2 Strengths and Limitations",
    "text": "5.2 Strengths and Limitations\nDiscuss what you perceive as strengths and limitations of your analysis."
  },
  {
    "objectID": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "href": "starter-analysis-exercise/products/report/starter-analysis-report.html#conclusions",
    "title": "Manuscript/Report Template for a Data Analysis Project",
    "section": "5.3 Conclusions",
    "text": "5.3 Conclusions\nWhat are the main take-home messages?\nInclude citations in your Rmd file using bibtex, the list of references will automatically be placed at the end\nThis paper (Leek & Peng, 2015) discusses types of analyses.\nThese papers (McKay, Ebell, Billings, et al., 2020; McKay, Ebell, Dale, et al., 2020) are good examples of papers published using a fully reproducible setup similar to the one shown in this template.\nNote that this cited reference will show up at the end of the document, the reference formatting is determined by the CSL file specified in the YAML header. Many more style files for almost any journal are available. You also specify the location of your bibtex reference file in the YAML. You can call your reference file anything you like, I just used the generic word references.bib but giving it a more descriptive name is probably better."
  },
  {
    "objectID": "starter-analysis-exercise/results/figures/readme.html",
    "href": "starter-analysis-exercise/results/figures/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all figures.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "starter-analysis-exercise/results/readme.html",
    "href": "starter-analysis-exercise/results/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "This folder contains results produced by the code, such as figures and tables.\nDepending on the size and type of your project, you can either place it all in a single folder or create sub-folders. For instance you could create a folder for figures, another for tables. Or you could create a sub-folder for dataset 1, another for dataset 2. Or you could have a subfolder for exploratory analysis, another for final analysis. The options are endless, choose whatever makes sense for your project. For this template, there is just a a single folder, but having sub-folders is often a good idea."
  },
  {
    "objectID": "starter-analysis-exercise/results/tables-files/readme.html",
    "href": "starter-analysis-exercise/results/tables-files/readme.html",
    "title": "Malika's Data Analysis Portfolio",
    "section": "",
    "text": "Folder for all tables (generally stored as Rds files) and other files.\nYou can create further sub-folders if that makes sense."
  },
  {
    "objectID": "tidytuesday-exercise/tidytuesday-exercise.html",
    "href": "tidytuesday-exercise/tidytuesday-exercise.html",
    "title": "Tidy Tuesday Exercise",
    "section": "",
    "text": "Placeholder file for the future Tidy Tuesday exercise."
  }
]